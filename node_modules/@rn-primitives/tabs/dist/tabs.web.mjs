'use client'

// src/tabs.web.tsx
import * as Tabs from "@radix-ui/react-tabs";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var TabsContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({ asChild, value, onValueChange, orientation, dir, activationMode, ...viewProps }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <TabsContext.Provider
      value={{
        value,
        onValueChange
      }}
    ><Tabs.Root
      value={value}
      onValueChange={onValueChange}
      orientation={orientation}
      dir={dir}
      activationMode={activationMode}
      asChild
    ><Component ref={ref} {...viewProps} /></Tabs.Root></TabsContext.Provider>;
  }
);
Root2.displayName = "RootWebTabs";
function useRootContext() {
  const context = React.useContext(TabsContext);
  if (!context) {
    throw new Error("Tabs compound components cannot be rendered outside the Tabs component");
  }
  return context;
}
var List2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : View2;
  return <Tabs.List asChild><Component ref={ref} {...props} /></Tabs.List>;
});
List2.displayName = "ListWebTabs";
var TriggerContext = React.createContext(null);
var Trigger2 = React.forwardRef(
  ({ asChild, value: tabValue, ...props }, ref) => {
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <TriggerContext.Provider value={{ value: tabValue }}><Tabs.Trigger value={tabValue} asChild><Component ref={ref} {...props} /></Tabs.Trigger></TriggerContext.Provider>;
  }
);
Trigger2.displayName = "TriggerWebTabs";
function useTriggerContext() {
  const context = React.useContext(TriggerContext);
  if (!context) {
    throw new Error(
      "Tabs.Trigger compound components cannot be rendered outside the Tabs.Trigger component"
    );
  }
  return context;
}
var Content2 = React.forwardRef(
  ({ asChild, forceMount, value, tabIndex = -1, ...props }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <Tabs.Content value={value} asChild><Component ref={ref} {...props} tabIndex={tabIndex} /></Tabs.Content>;
  }
);
Content2.displayName = "ContentWebTabs";
export {
  Content2 as Content,
  List2 as List,
  Root2 as Root,
  Trigger2 as Trigger,
  useRootContext,
  useTriggerContext
};
