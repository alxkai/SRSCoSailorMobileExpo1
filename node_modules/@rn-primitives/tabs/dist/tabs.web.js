'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tabs.web.tsx
var tabs_web_exports = {};
__export(tabs_web_exports, {
  Content: () => Content2,
  List: () => List2,
  Root: () => Root2,
  Trigger: () => Trigger2,
  useRootContext: () => useRootContext,
  useTriggerContext: () => useTriggerContext
});
module.exports = __toCommonJS(tabs_web_exports);
var Tabs = __toESM(require("@radix-ui/react-tabs"));
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var TabsContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({ asChild, value, onValueChange, orientation, dir, activationMode, ...viewProps }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <TabsContext.Provider
      value={{
        value,
        onValueChange
      }}
    ><Tabs.Root
      value={value}
      onValueChange={onValueChange}
      orientation={orientation}
      dir={dir}
      activationMode={activationMode}
      asChild
    ><Component ref={ref} {...viewProps} /></Tabs.Root></TabsContext.Provider>;
  }
);
Root2.displayName = "RootWebTabs";
function useRootContext() {
  const context = React.useContext(TabsContext);
  if (!context) {
    throw new Error("Tabs compound components cannot be rendered outside the Tabs component");
  }
  return context;
}
var List2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <Tabs.List asChild><Component ref={ref} {...props} /></Tabs.List>;
});
List2.displayName = "ListWebTabs";
var TriggerContext = React.createContext(null);
var Trigger2 = React.forwardRef(
  ({ asChild, value: tabValue, ...props }, ref) => {
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <TriggerContext.Provider value={{ value: tabValue }}><Tabs.Trigger value={tabValue} asChild><Component ref={ref} {...props} /></Tabs.Trigger></TriggerContext.Provider>;
  }
);
Trigger2.displayName = "TriggerWebTabs";
function useTriggerContext() {
  const context = React.useContext(TriggerContext);
  if (!context) {
    throw new Error(
      "Tabs.Trigger compound components cannot be rendered outside the Tabs.Trigger component"
    );
  }
  return context;
}
var Content2 = React.forwardRef(
  ({ asChild, forceMount, value, tabIndex = -1, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Tabs.Content value={value} asChild><Component ref={ref} {...props} tabIndex={tabIndex} /></Tabs.Content>;
  }
);
Content2.displayName = "ContentWebTabs";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  List,
  Root,
  Trigger,
  useRootContext,
  useTriggerContext
});
