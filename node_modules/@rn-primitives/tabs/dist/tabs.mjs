'use client'

// src/tabs.tsx
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var TabsContext = React.createContext(null);
var Root = React.forwardRef(
  ({
    asChild,
    value,
    onValueChange,
    orientation: _orientation,
    dir: _dir,
    activationMode: _activationMode,
    ...viewProps
  }, ref) => {
    const nativeID = React.useId();
    const Component = asChild ? Slot.View : View2;
    return <TabsContext.Provider
      value={{
        value,
        onValueChange,
        nativeID
      }}
    ><Component ref={ref} {...viewProps} /></TabsContext.Provider>;
  }
);
Root.displayName = "RootNativeTabs";
function useRootContext() {
  const context = React.useContext(TabsContext);
  if (!context) {
    throw new Error("Tabs compound components cannot be rendered outside the Tabs component");
  }
  return context;
}
var List = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : View2;
  return <Component ref={ref} role='tablist' {...props} />;
});
List.displayName = "ListNativeTabs";
var TriggerContext = React.createContext(null);
var Trigger = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled, value: tabValue, ...props }, ref) => {
    const { onValueChange, value: rootValue, nativeID } = useRootContext();
    function onPress(ev) {
      if (disabled) return;
      onValueChange(tabValue);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <TriggerContext.Provider value={{ value: tabValue }}><Component
      ref={ref}
      nativeID={`${nativeID}-tab-${tabValue}`}
      aria-disabled={!!disabled}
      aria-selected={rootValue === tabValue}
      role='tab'
      onPress={onPress}
      accessibilityState={{
        selected: rootValue === tabValue,
        disabled: !!disabled
      }}
      disabled={!!disabled}
      {...props}
    /></TriggerContext.Provider>;
  }
);
Trigger.displayName = "TriggerNativeTabs";
function useTriggerContext() {
  const context = React.useContext(TriggerContext);
  if (!context) {
    throw new Error(
      "Tabs.Trigger compound components cannot be rendered outside the Tabs.Trigger component"
    );
  }
  return context;
}
var Content = React.forwardRef(
  ({ asChild, forceMount, value: tabValue, ...props }, ref) => {
    const { value: rootValue, nativeID } = useRootContext();
    if (!forceMount) {
      if (rootValue !== tabValue) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : View2;
    return <Component
      ref={ref}
      aria-hidden={!(forceMount || rootValue === tabValue)}
      aria-labelledby={`${nativeID}-tab-${tabValue}`}
      role='tabpanel'
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeTabs";
export {
  Content,
  List,
  Root,
  Trigger,
  useRootContext,
  useTriggerContext
};
