'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tabs.tsx
var tabs_exports = {};
__export(tabs_exports, {
  Content: () => Content,
  List: () => List,
  Root: () => Root,
  Trigger: () => Trigger,
  useRootContext: () => useRootContext,
  useTriggerContext: () => useTriggerContext
});
module.exports = __toCommonJS(tabs_exports);
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var TabsContext = React.createContext(null);
var Root = React.forwardRef(
  ({
    asChild,
    value,
    onValueChange,
    orientation: _orientation,
    dir: _dir,
    activationMode: _activationMode,
    ...viewProps
  }, ref) => {
    const nativeID = React.useId();
    const Component = asChild ? Slot.View : import_react_native.View;
    return <TabsContext.Provider
      value={{
        value,
        onValueChange,
        nativeID
      }}
    ><Component ref={ref} {...viewProps} /></TabsContext.Provider>;
  }
);
Root.displayName = "RootNativeTabs";
function useRootContext() {
  const context = React.useContext(TabsContext);
  if (!context) {
    throw new Error("Tabs compound components cannot be rendered outside the Tabs component");
  }
  return context;
}
var List = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <Component ref={ref} role='tablist' {...props} />;
});
List.displayName = "ListNativeTabs";
var TriggerContext = React.createContext(null);
var Trigger = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled, value: tabValue, ...props }, ref) => {
    const { onValueChange, value: rootValue, nativeID } = useRootContext();
    function onPress(ev) {
      if (disabled) return;
      onValueChange(tabValue);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <TriggerContext.Provider value={{ value: tabValue }}><Component
      ref={ref}
      nativeID={`${nativeID}-tab-${tabValue}`}
      aria-disabled={!!disabled}
      aria-selected={rootValue === tabValue}
      role='tab'
      onPress={onPress}
      accessibilityState={{
        selected: rootValue === tabValue,
        disabled: !!disabled
      }}
      disabled={!!disabled}
      {...props}
    /></TriggerContext.Provider>;
  }
);
Trigger.displayName = "TriggerNativeTabs";
function useTriggerContext() {
  const context = React.useContext(TriggerContext);
  if (!context) {
    throw new Error(
      "Tabs.Trigger compound components cannot be rendered outside the Tabs.Trigger component"
    );
  }
  return context;
}
var Content = React.forwardRef(
  ({ asChild, forceMount, value: tabValue, ...props }, ref) => {
    const { value: rootValue, nativeID } = useRootContext();
    if (!forceMount) {
      if (rootValue !== tabValue) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Component
      ref={ref}
      aria-hidden={!(forceMount || rootValue === tabValue)}
      aria-labelledby={`${nativeID}-tab-${tabValue}`}
      role='tabpanel'
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeTabs";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  List,
  Root,
  Trigger,
  useRootContext,
  useTriggerContext
});
