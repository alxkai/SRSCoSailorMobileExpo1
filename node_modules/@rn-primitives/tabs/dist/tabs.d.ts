import * as _rn_primitives_types from '@rn-primitives/types';
import * as react_native from 'react-native';
import { View } from 'react-native';
import * as React from 'react';
import { RootProps } from './index.js';
import './tabs';

interface RootContext extends RootProps {
    nativeID: string;
}
declare const Root: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    value: string;
    onValueChange: (value: string) => void;
    orientation?: "horizontal" | "vertical";
    dir?: "ltr" | "rtl";
    activationMode?: "automatic" | "manual";
} & React.RefAttributes<View>>;
declare function useRootContext(): RootContext;
declare const List: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
declare const Trigger: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & {
    value: string;
} & React.RefAttributes<View>>;
declare function useTriggerContext(): {
    value: string;
};
declare const Content: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & _rn_primitives_types.ForceMountable & {
    value: string;
} & React.RefAttributes<View>>;

export { Content, List, Root, Trigger, useRootContext, useTriggerContext };
