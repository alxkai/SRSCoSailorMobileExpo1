'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/collapsible.tsx
var collapsible_exports = {};
__export(collapsible_exports, {
  Content: () => Content,
  Root: () => Root,
  Trigger: () => Trigger
});
module.exports = __toCommonJS(collapsible_exports);
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var CollapsibleContext = React.createContext(null);
var Root = React.forwardRef(
  ({
    asChild,
    disabled = false,
    open: openProp,
    defaultOpen,
    onOpenChange: onOpenChangeProp,
    ...viewProps
  }, ref) => {
    const nativeID = React.useId();
    const [open = false, onOpenChange] = (0, import_hooks.useControllableState)({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChangeProp
    });
    const Component = asChild ? Slot.View : import_react_native.View;
    return <CollapsibleContext.Provider
      value={{
        disabled,
        open,
        onOpenChange,
        nativeID
      }}
    ><Component ref={ref} {...viewProps} /></CollapsibleContext.Provider>;
  }
);
Root.displayName = "RootNativeCollapsible";
function useCollapsibleContext() {
  const context = React.useContext(CollapsibleContext);
  if (!context) {
    throw new Error(
      "Collapsible compound components cannot be rendered outside the Collapsible component"
    );
  }
  return context;
}
var Trigger = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled: disabledProp = false, ...props }, ref) => {
    const { disabled, open, onOpenChange, nativeID } = useCollapsibleContext();
    function onPress(ev) {
      if (disabled || disabledProp) return;
      onOpenChange(!open);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Component
      ref={ref}
      nativeID={nativeID}
      aria-disabled={(disabled || disabledProp) ?? void 0}
      role='button'
      onPress={onPress}
      accessibilityState={{
        expanded: open,
        disabled: (disabled || disabledProp) ?? void 0
      }}
      disabled={disabled || disabledProp}
      {...props}
    />;
  }
);
Trigger.displayName = "TriggerNativeCollapsible";
var Content = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { nativeID, open } = useCollapsibleContext();
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Component
      ref={ref}
      aria-hidden={!(forceMount || open)}
      aria-labelledby={nativeID}
      role={"region"}
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeCollapsible";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Root,
  Trigger
});
