'use client'

// src/collapsible.tsx
import { useControllableState } from "@rn-primitives/hooks";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var CollapsibleContext = React.createContext(null);
var Root = React.forwardRef(
  ({
    asChild,
    disabled = false,
    open: openProp,
    defaultOpen,
    onOpenChange: onOpenChangeProp,
    ...viewProps
  }, ref) => {
    const nativeID = React.useId();
    const [open = false, onOpenChange] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChangeProp
    });
    const Component = asChild ? Slot.View : View2;
    return <CollapsibleContext.Provider
      value={{
        disabled,
        open,
        onOpenChange,
        nativeID
      }}
    ><Component ref={ref} {...viewProps} /></CollapsibleContext.Provider>;
  }
);
Root.displayName = "RootNativeCollapsible";
function useCollapsibleContext() {
  const context = React.useContext(CollapsibleContext);
  if (!context) {
    throw new Error(
      "Collapsible compound components cannot be rendered outside the Collapsible component"
    );
  }
  return context;
}
var Trigger = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled: disabledProp = false, ...props }, ref) => {
    const { disabled, open, onOpenChange, nativeID } = useCollapsibleContext();
    function onPress(ev) {
      if (disabled || disabledProp) return;
      onOpenChange(!open);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Component
      ref={ref}
      nativeID={nativeID}
      aria-disabled={(disabled || disabledProp) ?? void 0}
      role='button'
      onPress={onPress}
      accessibilityState={{
        expanded: open,
        disabled: (disabled || disabledProp) ?? void 0
      }}
      disabled={disabled || disabledProp}
      {...props}
    />;
  }
);
Trigger.displayName = "TriggerNativeCollapsible";
var Content = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { nativeID, open } = useCollapsibleContext();
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : View2;
    return <Component
      ref={ref}
      aria-hidden={!(forceMount || open)}
      aria-labelledby={nativeID}
      role={"region"}
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeCollapsible";
export {
  Content,
  Root,
  Trigger
};
