'use client'

// src/collapsible.web.tsx
import * as Collapsible from "@radix-ui/react-collapsible";
import {
  useAugmentedRef,
  useControllableState,
  useIsomorphicLayoutEffect
} from "@rn-primitives/hooks";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var CollapsibleContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({
    asChild,
    disabled = false,
    open: openProp,
    defaultOpen,
    onOpenChange: onOpenChangeProp,
    ...viewProps
  }, ref) => {
    const [open = false, onOpenChange] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChangeProp
    });
    const augmentedRef = useAugmentedRef({ ref });
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
      }
    }, [open]);
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        if (disabled) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled]);
    const Component = asChild ? Slot.View : View2;
    return <CollapsibleContext.Provider
      value={{
        disabled,
        open,
        onOpenChange
      }}
    ><Collapsible.Root
      open={open}
      defaultOpen={defaultOpen}
      onOpenChange={onOpenChange}
      disabled={disabled}
    ><Component ref={ref} {...viewProps} /></Collapsible.Root></CollapsibleContext.Provider>;
  }
);
Root2.displayName = "RootWebCollapsible";
function useCollapsibleContext() {
  const context = React.useContext(CollapsibleContext);
  if (!context) {
    throw new Error(
      "Collapsible compound components cannot be rendered outside the Collapsible component"
    );
  }
  return context;
}
var Trigger2 = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled: disabledProp = false, ...props }, ref) => {
    const { disabled, open, onOpenChange } = useCollapsibleContext();
    const augmentedRef = useAugmentedRef({ ref });
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
      }
    }, [open]);
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.type = "button";
        if (disabled) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled]);
    function onPress(ev) {
      onPressProp?.(ev);
      onOpenChange(!open);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Collapsible.Trigger disabled={disabled} asChild><Component
      ref={augmentedRef}
      role='button'
      onPress={onPress}
      disabled={disabled}
      {...props}
    /></Collapsible.Trigger>;
  }
);
Trigger2.displayName = "TriggerWebCollapsible";
var Content2 = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const augmentedRef = useAugmentedRef({ ref });
    const { open } = useCollapsibleContext();
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
      }
    }, [open]);
    const Component = asChild ? Slot.View : View2;
    return <Collapsible.Content forceMount={forceMount} asChild><Component ref={augmentedRef} {...props} /></Collapsible.Content>;
  }
);
Content2.displayName = "ContentWebCollapsible";
export {
  Content2 as Content,
  Root2 as Root,
  Trigger2 as Trigger
};
