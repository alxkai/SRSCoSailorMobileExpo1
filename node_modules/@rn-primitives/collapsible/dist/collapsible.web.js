'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/collapsible.web.tsx
var collapsible_web_exports = {};
__export(collapsible_web_exports, {
  Content: () => Content2,
  Root: () => Root2,
  Trigger: () => Trigger2
});
module.exports = __toCommonJS(collapsible_web_exports);
var Collapsible = __toESM(require("@radix-ui/react-collapsible"));
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var CollapsibleContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({
    asChild,
    disabled = false,
    open: openProp,
    defaultOpen,
    onOpenChange: onOpenChangeProp,
    ...viewProps
  }, ref) => {
    const [open = false, onOpenChange] = (0, import_hooks.useControllableState)({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChangeProp
    });
    const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
      }
    }, [open]);
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        if (disabled) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled]);
    const Component = asChild ? Slot.View : import_react_native.View;
    return <CollapsibleContext.Provider
      value={{
        disabled,
        open,
        onOpenChange
      }}
    ><Collapsible.Root
      open={open}
      defaultOpen={defaultOpen}
      onOpenChange={onOpenChange}
      disabled={disabled}
    ><Component ref={ref} {...viewProps} /></Collapsible.Root></CollapsibleContext.Provider>;
  }
);
Root2.displayName = "RootWebCollapsible";
function useCollapsibleContext() {
  const context = React.useContext(CollapsibleContext);
  if (!context) {
    throw new Error(
      "Collapsible compound components cannot be rendered outside the Collapsible component"
    );
  }
  return context;
}
var Trigger2 = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled: disabledProp = false, ...props }, ref) => {
    const { disabled, open, onOpenChange } = useCollapsibleContext();
    const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
      }
    }, [open]);
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.type = "button";
        if (disabled) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled]);
    function onPress(ev) {
      onPressProp?.(ev);
      onOpenChange(!open);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Collapsible.Trigger disabled={disabled} asChild><Component
      ref={augmentedRef}
      role='button'
      onPress={onPress}
      disabled={disabled}
      {...props}
    /></Collapsible.Trigger>;
  }
);
Trigger2.displayName = "TriggerWebCollapsible";
var Content2 = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
    const { open } = useCollapsibleContext();
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
      }
    }, [open]);
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Collapsible.Content forceMount={forceMount} asChild><Component ref={augmentedRef} {...props} /></Collapsible.Content>;
  }
);
Content2.displayName = "ContentWebCollapsible";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Root,
  Trigger
});
