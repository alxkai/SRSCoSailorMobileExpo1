'use client'

// src/toggle-group.tsx
import * as Slot from "@rn-primitives/slot";
import { ToggleGroupUtils } from "@rn-primitives/utils";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var ToggleGroupContext = React.createContext(null);
var Root = React.forwardRef(
  ({
    asChild,
    type,
    value,
    onValueChange,
    disabled = false,
    rovingFocus: _rovingFocus,
    orientation: _orientation,
    dir: _dir,
    loop: _loop,
    ...viewProps
  }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <ToggleGroupContext.Provider
      value={{
        type,
        value,
        disabled,
        onValueChange
      }}
    ><Component ref={ref} role='group' {...viewProps} /></ToggleGroupContext.Provider>;
  }
);
Root.displayName = "RootToggleGroup";
function useRootContext() {
  const context = React.useContext(ToggleGroupContext);
  if (!context) {
    throw new Error(
      "ToggleGroup compound components cannot be rendered outside the ToggleGroup component"
    );
  }
  return context;
}
var ItemContext = React.createContext(null);
var Item = React.forwardRef(
  ({ asChild, value: itemValue, disabled: disabledProp = false, onPress: onPressProp, ...props }, ref) => {
    const id = React.useId();
    const { type, disabled, value, onValueChange } = useRootContext();
    function onPress(ev) {
      if (disabled || disabledProp) return;
      if (type === "single") {
        onValueChange(ToggleGroupUtils.getNewSingleValue(value, itemValue));
      }
      if (type === "multiple") {
        onValueChange(ToggleGroupUtils.getNewMultipleValue(value, itemValue));
      }
      onPressProp?.(ev);
    }
    const isChecked = type === "single" ? ToggleGroupUtils.getIsSelected(value, itemValue) : void 0;
    const isSelected = type === "multiple" ? ToggleGroupUtils.getIsSelected(value, itemValue) : void 0;
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <ItemContext.Provider value={{ value: itemValue }}><Component
      ref={ref}
      aria-disabled={disabled}
      role={type === "single" ? "radio" : "checkbox"}
      onPress={onPress}
      aria-checked={isChecked}
      aria-selected={isSelected}
      disabled={(disabled || disabledProp) ?? false}
      accessibilityState={{
        disabled: (disabled || disabledProp) ?? false,
        checked: isChecked,
        selected: isSelected
      }}
      {...props}
    /></ItemContext.Provider>;
  }
);
Item.displayName = "ItemToggleGroup";
function useItemContext() {
  const context = React.useContext(ItemContext);
  if (!context) {
    throw new Error(
      "ToggleGroupItem compound components cannot be rendered outside the ToggleGroupItem component"
    );
  }
  return context;
}
var utils = ToggleGroupUtils;
export {
  Item,
  Root,
  useItemContext,
  useRootContext,
  utils
};
