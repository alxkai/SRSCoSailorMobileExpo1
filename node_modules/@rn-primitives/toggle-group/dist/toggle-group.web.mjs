'use client'

// src/toggle-group.web.tsx
import * as ToggleGroup from "@radix-ui/react-toggle-group";
import * as Slot from "@rn-primitives/slot";
import { ToggleGroupUtils } from "@rn-primitives/utils";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var ToggleGroupContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({
    asChild,
    type,
    value,
    onValueChange,
    disabled = false,
    rovingFocus,
    orientation,
    dir,
    loop,
    ...viewProps
  }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <ToggleGroupContext.Provider
      value={{
        type,
        value,
        disabled,
        onValueChange
      }}
    ><ToggleGroup.Root
      type={type}
      value={value}
      onValueChange={onValueChange}
      disabled={disabled}
      rovingFocus={rovingFocus}
      orientation={orientation}
      dir={dir}
      loop={loop}
      asChild
    ><Component ref={ref} {...viewProps} /></ToggleGroup.Root></ToggleGroupContext.Provider>;
  }
);
Root2.displayName = "RootToggleGroup";
function useRootContext() {
  const context = React.useContext(ToggleGroupContext);
  if (!context) {
    throw new Error(
      "ToggleGroup compound components cannot be rendered outside the ToggleGroup component"
    );
  }
  return context;
}
var ItemContext = React.createContext(null);
var Item2 = React.forwardRef(
  ({ asChild, value: itemValue, disabled: disabledProp = false, onPress: onPressProp, ...props }, ref) => {
    const { type, disabled, value, onValueChange } = useRootContext();
    function onPress(ev) {
      onPressProp?.(ev);
      if (type === "single") {
        onValueChange(ToggleGroupUtils.getNewSingleValue(value, itemValue));
      }
      if (type === "multiple") {
        onValueChange(ToggleGroupUtils.getNewMultipleValue(value, itemValue));
      }
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <ItemContext.Provider value={{ value: itemValue }}><ToggleGroup.Item value={itemValue} asChild><Component
      ref={ref}
      onPress={onPress}
      disabled={disabled || disabledProp}
      role='button'
      {...props}
    /></ToggleGroup.Item></ItemContext.Provider>;
  }
);
Item2.displayName = "ItemToggleGroup";
function useItemContext() {
  const context = React.useContext(ItemContext);
  if (!context) {
    throw new Error(
      "ToggleGroupItem compound components cannot be rendered outside the ToggleGroupItem component"
    );
  }
  return context;
}
var utils = ToggleGroupUtils;
export {
  Item2 as Item,
  Root2 as Root,
  useItemContext,
  useRootContext,
  utils
};
