'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/toggle-group.tsx
var toggle_group_exports = {};
__export(toggle_group_exports, {
  Item: () => Item,
  Root: () => Root,
  useItemContext: () => useItemContext,
  useRootContext: () => useRootContext,
  utils: () => utils
});
module.exports = __toCommonJS(toggle_group_exports);
var Slot = __toESM(require("@rn-primitives/slot"));
var import_utils = require("@rn-primitives/utils");
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var ToggleGroupContext = React.createContext(null);
var Root = React.forwardRef(
  ({
    asChild,
    type,
    value,
    onValueChange,
    disabled = false,
    rovingFocus: _rovingFocus,
    orientation: _orientation,
    dir: _dir,
    loop: _loop,
    ...viewProps
  }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <ToggleGroupContext.Provider
      value={{
        type,
        value,
        disabled,
        onValueChange
      }}
    ><Component ref={ref} role='group' {...viewProps} /></ToggleGroupContext.Provider>;
  }
);
Root.displayName = "RootToggleGroup";
function useRootContext() {
  const context = React.useContext(ToggleGroupContext);
  if (!context) {
    throw new Error(
      "ToggleGroup compound components cannot be rendered outside the ToggleGroup component"
    );
  }
  return context;
}
var ItemContext = React.createContext(null);
var Item = React.forwardRef(
  ({ asChild, value: itemValue, disabled: disabledProp = false, onPress: onPressProp, ...props }, ref) => {
    const id = React.useId();
    const { type, disabled, value, onValueChange } = useRootContext();
    function onPress(ev) {
      if (disabled || disabledProp) return;
      if (type === "single") {
        onValueChange(import_utils.ToggleGroupUtils.getNewSingleValue(value, itemValue));
      }
      if (type === "multiple") {
        onValueChange(import_utils.ToggleGroupUtils.getNewMultipleValue(value, itemValue));
      }
      onPressProp?.(ev);
    }
    const isChecked = type === "single" ? import_utils.ToggleGroupUtils.getIsSelected(value, itemValue) : void 0;
    const isSelected = type === "multiple" ? import_utils.ToggleGroupUtils.getIsSelected(value, itemValue) : void 0;
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <ItemContext.Provider value={{ value: itemValue }}><Component
      ref={ref}
      aria-disabled={disabled}
      role={type === "single" ? "radio" : "checkbox"}
      onPress={onPress}
      aria-checked={isChecked}
      aria-selected={isSelected}
      disabled={(disabled || disabledProp) ?? false}
      accessibilityState={{
        disabled: (disabled || disabledProp) ?? false,
        checked: isChecked,
        selected: isSelected
      }}
      {...props}
    /></ItemContext.Provider>;
  }
);
Item.displayName = "ItemToggleGroup";
function useItemContext() {
  const context = React.useContext(ItemContext);
  if (!context) {
    throw new Error(
      "ToggleGroupItem compound components cannot be rendered outside the ToggleGroupItem component"
    );
  }
  return context;
}
var utils = import_utils.ToggleGroupUtils;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Item,
  Root,
  useItemContext,
  useRootContext,
  utils
});
