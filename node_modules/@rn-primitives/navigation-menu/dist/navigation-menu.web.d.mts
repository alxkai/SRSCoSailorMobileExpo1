import * as _rn_primitives_types from '@rn-primitives/types';
import * as react_native from 'react-native';
import { View } from 'react-native';
import * as React from 'react';
import { RootProps, ItemProps, PortalProps, ViewportProps } from './index.mjs';
import './navigation-menu';

declare const Root: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    value: string | undefined;
    onValueChange: (value: string | undefined) => void;
    delayDuration?: number;
    skipDelayDuration?: number;
    dir?: "ltr" | "rtl";
    orientation?: "horizontal" | "vertical";
} & React.RefAttributes<View>>;
declare function useRootContext(): RootProps;
declare const List: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
declare const Item: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    value: string | undefined;
} & React.RefAttributes<View>>;
declare function useItemContext(): ItemProps;
declare const Trigger: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<View>>;
declare function Portal({ children }: PortalProps): React.JSX.Element;
declare const Content: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & _rn_primitives_types.PositionedContentProps & React.RefAttributes<View>>;
declare const Link: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & {
    active?: boolean;
} & React.RefAttributes<View>>;
declare const Viewport: React.ForwardRefExoticComponent<ViewportProps & React.RefAttributes<View>>;
declare const Indicator: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;

export { Content, Indicator, Item, Link, List, Portal, Root, Trigger, Viewport, useItemContext, useRootContext };
