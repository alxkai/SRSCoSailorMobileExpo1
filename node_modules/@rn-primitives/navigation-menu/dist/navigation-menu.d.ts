import * as _rn_primitives_types from '@rn-primitives/types';
import * as react_native from 'react-native';
import { View, LayoutRectangle } from 'react-native';
import { LayoutPosition } from '@rn-primitives/hooks';
import * as React from 'react';
import { PortalProps, ViewportProps, RootProps } from './index.js';
import './navigation-menu';

interface INavigationMenuRootContext extends RootProps {
    triggerPosition: LayoutPosition | null;
    setTriggerPosition: (triggerPosition: LayoutPosition | null) => void;
    contentLayout: LayoutRectangle | null;
    setContentLayout: (contentLayout: LayoutRectangle | null) => void;
    nativeID: string;
}
declare const Root: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    value: string | undefined;
    onValueChange: (value: string | undefined) => void;
    delayDuration?: number;
    skipDelayDuration?: number;
    dir?: "ltr" | "rtl";
    orientation?: "horizontal" | "vertical";
} & React.RefAttributes<View>>;
declare function useRootContext(): INavigationMenuRootContext;
declare const List: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
declare const Item: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    value: string | undefined;
} & React.RefAttributes<View>>;
declare function useItemContext(): react_native.ViewProps & {
    asChild?: boolean;
} & {
    value: string | undefined;
} & {
    nativeID: string;
};
declare const Trigger: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<View>>;
/**
 * @warning when using a custom `<PortalHost />`, you will have to adjust the Content's sideOffset to account for nav elements like headers.
 */
declare function Portal({ forceMount, hostName, children }: PortalProps): React.JSX.Element | null;
/**
 * @info `position`, `top`, `left`, and `maxWidth` style properties are controlled internally. Opt out of this behavior by setting `disablePositioningStyle` to `true`.
 */
declare const Content: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & _rn_primitives_types.PositionedContentProps & React.RefAttributes<View>>;
declare const Link: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & {
    active?: boolean;
} & React.RefAttributes<View>>;
declare const Viewport: React.ForwardRefExoticComponent<ViewportProps & React.RefAttributes<View>>;
declare const Indicator: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;

export { Content, Indicator, Item, Link, List, Portal, Root, Trigger, Viewport, useItemContext, useRootContext };
