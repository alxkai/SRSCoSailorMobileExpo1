'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/navigation-menu.web.tsx
var navigation_menu_web_exports = {};
__export(navigation_menu_web_exports, {
  Content: () => Content2,
  Indicator: () => Indicator2,
  Item: () => Item2,
  Link: () => Link2,
  List: () => List2,
  Portal: () => Portal,
  Root: () => Root2,
  Trigger: () => Trigger2,
  Viewport: () => Viewport2,
  useItemContext: () => useItemContext,
  useRootContext: () => useRootContext
});
module.exports = __toCommonJS(navigation_menu_web_exports);
var NavigationMenu = __toESM(require("@radix-ui/react-navigation-menu"));
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var import_utils = require("@rn-primitives/utils");
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var NavigationMenuContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({
    asChild,
    value,
    onValueChange,
    delayDuration,
    skipDelayDuration,
    dir,
    orientation,
    ...viewProps
  }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <NavigationMenuContext.Provider value={{ value, onValueChange, orientation }}><NavigationMenu.Root
      value={value}
      onValueChange={onValueChange}
      delayDuration={delayDuration}
      skipDelayDuration={skipDelayDuration}
      dir={dir}
      orientation={orientation}
    ><Component ref={ref} {...viewProps} /></NavigationMenu.Root></NavigationMenuContext.Provider>;
  }
);
Root2.displayName = "RootWebNavigationMenu";
function useRootContext() {
  const context = React.useContext(NavigationMenuContext);
  if (!context) {
    throw new Error(
      "NavigationMenu compound components cannot be rendered outside the NavigationMenu component"
    );
  }
  return context;
}
var List2 = React.forwardRef(({ asChild, ...viewProps }, ref) => {
  const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
  const { orientation } = useRootContext();
  (0, import_hooks.useIsomorphicLayoutEffect)(() => {
    if (augmentedRef.current) {
      const augRef = augmentedRef.current;
      augRef.dataset.orientation = orientation;
    }
  }, [orientation]);
  const Component = asChild ? Slot.View : import_react_native.View;
  return <NavigationMenu.List asChild><Component ref={ref} {...viewProps} /></NavigationMenu.List>;
});
List2.displayName = "ListWebNavigationMenu";
var ItemContext = React.createContext(null);
var Item2 = React.forwardRef(({ asChild, value, ...props }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <ItemContext.Provider value={{ value }}><NavigationMenu.Item value={value} asChild><Component ref={ref} {...props} /></NavigationMenu.Item></ItemContext.Provider>;
});
Item2.displayName = "ItemWebNavigationMenu";
function useItemContext() {
  const context = React.useContext(ItemContext);
  if (!context) {
    throw new Error(
      "NavigationMenu compound components cannot be rendered outside the NavigationMenu component"
    );
  }
  return context;
}
var Trigger2 = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled = false, onKeyDown: onKeyDownProp, ...props }, ref) => {
    const { value: rootValue, onValueChange } = useRootContext();
    const { value } = useItemContext();
    function onKeyDown(ev) {
      onKeyDownProp?.(ev);
      if (ev.key === " ") {
        onPressProp?.(import_utils.EmptyGestureResponderEvent);
        onValueChange(value === rootValue ? "" : value);
      }
    }
    function onPress(ev) {
      onPressProp?.(ev);
      onValueChange(value === rootValue ? "" : value);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <NavigationMenu.Trigger disabled={disabled ?? void 0} asChild><Component
      ref={ref}
      onKeyDown={onKeyDown}
      onPress={onPress}
      {...props}
    /></NavigationMenu.Trigger>;
  }
);
Trigger2.displayName = "TriggerWebNavigationMenu";
function Portal({ children }) {
  return <>{children}</>;
}
var Content2 = React.forwardRef(
  ({
    asChild = false,
    forceMount,
    align: _align,
    side: _side,
    sideOffset: _sideOffset,
    alignOffset: _alignOffset,
    avoidCollisions: _avoidCollisions,
    onLayout: onLayoutProp,
    insets: _insets,
    disablePositioningStyle: _disablePositioningStyle,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    ...props
  }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <NavigationMenu.Content
      forceMount={forceMount}
      onEscapeKeyDown={onEscapeKeyDown}
      onPointerDownOutside={onPointerDownOutside}
      onFocusOutside={onFocusOutside}
      onInteractOutside={onInteractOutside}
    ><Component ref={ref} {...props} /></NavigationMenu.Content>;
  }
);
Content2.displayName = "ContentWebNavigationMenu";
var Link2 = React.forwardRef(
  ({ asChild, active, onPress: onPressProp, onKeyDown: onKeyDownProp, ...props }, ref) => {
    const { onValueChange } = useRootContext();
    function onKeyDown(ev) {
      onKeyDownProp?.(ev);
      if (ev.key === "Enter" || ev.key === " ") {
        onPressProp?.(import_utils.EmptyGestureResponderEvent);
        onValueChange("");
      }
    }
    function onPress(ev) {
      onPressProp?.(ev);
      onValueChange("");
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <NavigationMenu.Link active={active} asChild><Component
      ref={ref}
      role='link'
      onKeyDown={onKeyDown}
      onPress={onPress}
      {...props}
    /></NavigationMenu.Link>;
  }
);
Link2.displayName = "LinkWebNavigationMenu";
var Viewport2 = React.forwardRef((props, ref) => {
  return <Slot.View ref={ref} {...props}><NavigationMenu.Viewport /></Slot.View>;
});
Viewport2.displayName = "ViewportWebNavigationMenu";
var Indicator2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <NavigationMenu.Indicator asChild><Component ref={ref} {...props} /></NavigationMenu.Indicator>;
});
Indicator2.displayName = "IndicatorWebNavigationMenu";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Indicator,
  Item,
  Link,
  List,
  Portal,
  Root,
  Trigger,
  Viewport,
  useItemContext,
  useRootContext
});
