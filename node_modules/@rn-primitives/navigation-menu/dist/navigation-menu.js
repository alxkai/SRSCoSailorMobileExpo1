'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/navigation-menu.tsx
var navigation_menu_exports = {};
__export(navigation_menu_exports, {
  Content: () => Content,
  Indicator: () => Indicator,
  Item: () => Item,
  Link: () => Link,
  List: () => List,
  Portal: () => Portal,
  Root: () => Root,
  Trigger: () => Trigger,
  Viewport: () => Viewport,
  useItemContext: () => useItemContext,
  useRootContext: () => useRootContext
});
module.exports = __toCommonJS(navigation_menu_exports);
var import_hooks = require("@rn-primitives/hooks");
var import_portal = require("@rn-primitives/portal");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var RootContext = React.createContext(null);
var Root = React.forwardRef(
  ({ asChild, value, onValueChange, ...viewProps }, ref) => {
    const nativeID = React.useId();
    const [triggerPosition, setTriggerPosition] = React.useState(null);
    const [contentLayout, setContentLayout] = React.useState(null);
    const Component = asChild ? Slot.View : import_react_native.View;
    return <RootContext.Provider
      value={{
        value,
        onValueChange,
        nativeID,
        contentLayout,
        setContentLayout,
        setTriggerPosition,
        triggerPosition
      }}
    ><Component ref={ref} role='navigation' {...viewProps} /></RootContext.Provider>;
  }
);
Root.displayName = "RootNativeNavigationMenu";
function useRootContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error(
      "NavigationMenu compound components cannot be rendered outside the NavigationMenu component"
    );
  }
  return context;
}
var List = React.forwardRef(({ asChild, ...viewProps }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <Component ref={ref} role='menubar' {...viewProps} />;
});
List.displayName = "ListNativeNavigationMenu";
var ItemContext = React.createContext(null);
var Item = React.forwardRef(({ asChild, value, ...viewProps }, ref) => {
  const nativeID = React.useId();
  const Component = asChild ? Slot.View : import_react_native.View;
  return <ItemContext.Provider
    value={{
      value,
      nativeID
    }}
  ><Component ref={ref} role='menuitem' {...viewProps} /></ItemContext.Provider>;
});
Item.displayName = "ItemNativeNavigationMenu";
function useItemContext() {
  const context = React.useContext(ItemContext);
  if (!context) {
    throw new Error(
      "NavigationMenu compound components cannot be rendered outside the NavigationMenu component"
    );
  }
  return context;
}
var Trigger = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled = false, ...props }, ref) => {
    const triggerRef = React.useRef(null);
    const { value, onValueChange, setTriggerPosition } = useRootContext();
    const { value: menuValue } = useItemContext();
    React.useImperativeHandle(
      ref,
      () => {
        if (!triggerRef.current) {
          return new import_react_native.View({});
        }
        return triggerRef.current;
      },
      [triggerRef.current]
    );
    function onPress(ev) {
      if (disabled) return;
      triggerRef.current?.measure((_x, _y, width, height, pageX, pageY) => {
        setTriggerPosition({ width, pageX, pageY, height });
      });
      onValueChange(menuValue === value ? "" : menuValue);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Component
      ref={triggerRef}
      aria-disabled={disabled ?? void 0}
      role='button'
      onPress={onPress}
      disabled={disabled ?? void 0}
      aria-expanded={value === menuValue}
      {...props}
    />;
  }
);
Trigger.displayName = "TriggerNativeNavigationMenu";
function Portal({ forceMount, hostName, children }) {
  const navigationMenu = useRootContext();
  const item = useItemContext();
  if (!navigationMenu.triggerPosition) {
    return null;
  }
  if (!forceMount) {
    if (navigationMenu.value !== item.value) {
      return null;
    }
  }
  return <import_portal.Portal hostName={hostName} name={`${navigationMenu.nativeID}_portal_provider`}><RootContext.Provider
    value={navigationMenu}
    key={`RootContext_${navigationMenu.nativeID}_portal_provider`}
  ><ItemContext.Provider value={item}>{children}</ItemContext.Provider></RootContext.Provider></import_portal.Portal>;
}
var Content = React.forwardRef(
  ({
    asChild = false,
    forceMount,
    align = "center",
    side = "bottom",
    sideOffset = 0,
    alignOffset = 0,
    avoidCollisions = true,
    onLayout: onLayoutProp,
    insets,
    style,
    disablePositioningStyle,
    ...props
  }, ref) => {
    const {
      value,
      onValueChange,
      triggerPosition,
      setTriggerPosition,
      contentLayout,
      setContentLayout
    } = useRootContext();
    const { value: menuValue, nativeID } = useItemContext();
    React.useEffect(() => {
      const backHandler = import_react_native.BackHandler.addEventListener("hardwareBackPress", () => {
        setTriggerPosition(null);
        setContentLayout(null);
        onValueChange("");
        return true;
      });
      return () => {
        setContentLayout(null);
        backHandler.remove();
      };
    }, []);
    const positionStyle = (0, import_hooks.useRelativePosition)({
      align,
      avoidCollisions,
      triggerPosition,
      contentLayout,
      alignOffset,
      insets,
      sideOffset,
      side,
      disablePositioningStyle
    });
    function onLayout(event) {
      setContentLayout(event.nativeEvent.layout);
      onLayoutProp?.(event);
    }
    if (!forceMount) {
      if (value !== menuValue) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Component
      ref={ref}
      role='menu'
      nativeID={nativeID}
      aria-modal={true}
      style={[positionStyle, style]}
      onLayout={onLayout}
      onStartShouldSetResponder={onStartShouldSetResponder}
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeNavigationMenu";
var Link = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
  return <Component ref={ref} role='link' {...props} />;
});
Link.displayName = "LinkNativeNavigationMenu";
var Viewport = React.forwardRef((props, ref) => {
  return <import_react_native.View ref={ref} {...props} />;
});
Viewport.displayName = "ViewportNativeNavigationMenu";
var Indicator = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <Component ref={ref} {...props} />;
});
Indicator.displayName = "IndicatorNativeNavigationMenu";
function onStartShouldSetResponder() {
  return true;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Indicator,
  Item,
  Link,
  List,
  Portal,
  Root,
  Trigger,
  Viewport,
  useItemContext,
  useRootContext
});
