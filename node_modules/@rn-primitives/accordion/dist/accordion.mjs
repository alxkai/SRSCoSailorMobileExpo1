'use client'

// src/accordion.tsx
import { useControllableState } from "@rn-primitives/hooks";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var AccordionContext = React.createContext(null);
var Root = React.forwardRef(
  ({
    asChild,
    type,
    disabled,
    collapsible = true,
    value: valueProp,
    onValueChange: onValueChangeProps,
    defaultValue,
    ...viewProps
  }, ref) => {
    const [value = type === "multiple" ? [] : void 0, onValueChange] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChangeProps
    });
    const Component = asChild ? Slot.View : View2;
    return <AccordionContext.Provider
      value={{
        type,
        disabled,
        collapsible,
        value,
        onValueChange
      }}
    ><Component ref={ref} {...viewProps} /></AccordionContext.Provider>;
  }
);
Root.displayName = "RootNativeAccordion";
function useRootContext() {
  const context = React.useContext(AccordionContext);
  if (!context) {
    throw new Error(
      "Accordion compound components cannot be rendered outside the Accordion component"
    );
  }
  return context;
}
var AccordionItemContext = React.createContext(null);
var Item = React.forwardRef(
  ({ asChild, value, disabled, ...viewProps }, ref) => {
    const { value: rootValue } = useRootContext();
    const nativeID = React.useId();
    const Component = asChild ? Slot.View : View2;
    return <AccordionItemContext.Provider
      value={{
        value,
        disabled,
        nativeID,
        isExpanded: isItemExpanded(rootValue, value)
      }}
    ><Component ref={ref} {...viewProps} /></AccordionItemContext.Provider>;
  }
);
Item.displayName = "ItemNativeAccordion";
function useItemContext() {
  const context = React.useContext(AccordionItemContext);
  if (!context) {
    throw new Error(
      "AccordionItem compound components cannot be rendered outside the AccordionItem component"
    );
  }
  return context;
}
var Header = React.forwardRef(({ asChild, ...props }, ref) => {
  const { disabled: rootDisabled } = useRootContext();
  const { disabled: itemDisabled, isExpanded } = useItemContext();
  const Component = asChild ? Slot.View : View2;
  return <Component
    ref={ref}
    role='heading'
    aria-expanded={isExpanded}
    aria-disabled={rootDisabled ?? itemDisabled}
    {...props}
  />;
});
Header.displayName = "HeaderNativeAccordion";
var Trigger = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled: disabledProp, ...props }, ref) => {
    const {
      disabled: rootDisabled,
      type,
      onValueChange,
      value: rootValue,
      collapsible
    } = useRootContext();
    const { nativeID, disabled: itemDisabled, value, isExpanded } = useItemContext();
    function onPress(ev) {
      if (rootDisabled || itemDisabled) return;
      if (type === "single") {
        const newValue = collapsible ? value === rootValue ? void 0 : value : value;
        onValueChange(newValue);
      }
      if (type === "multiple") {
        const rootToArray = toStringArray(rootValue);
        const newValue = collapsible ? rootToArray.includes(value) ? rootToArray.filter((val) => val !== value) : rootToArray.concat(value) : [...new Set(rootToArray.concat(value))];
        onValueChange(newValue);
      }
      onPressProp?.(ev);
    }
    const isDisabled = disabledProp || rootDisabled || itemDisabled;
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Component
      ref={ref}
      nativeID={nativeID}
      aria-disabled={isDisabled}
      role='button'
      onPress={onPress}
      accessibilityState={{
        expanded: isExpanded,
        disabled: isDisabled
      }}
      disabled={isDisabled}
      {...props}
    />;
  }
);
Trigger.displayName = "TriggerNativeAccordion";
var Content = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { type } = useRootContext();
    const { nativeID, isExpanded } = useItemContext();
    if (!forceMount) {
      if (!isExpanded) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : View2;
    return <Component
      ref={ref}
      aria-hidden={!(forceMount || isExpanded)}
      aria-labelledby={nativeID}
      role={type === "single" ? "region" : "summary"}
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeAccordion";
function toStringArray(value) {
  return Array.isArray(value) ? value : value ? [value] : [];
}
function isItemExpanded(rootValue, value) {
  return Array.isArray(rootValue) ? rootValue.includes(value) : rootValue === value;
}
export {
  Content,
  Header,
  Item,
  Root,
  Trigger,
  useItemContext,
  useRootContext
};
