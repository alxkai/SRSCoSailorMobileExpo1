'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/accordion.tsx
var accordion_exports = {};
__export(accordion_exports, {
  Content: () => Content,
  Header: () => Header,
  Item: () => Item,
  Root: () => Root,
  Trigger: () => Trigger,
  useItemContext: () => useItemContext,
  useRootContext: () => useRootContext
});
module.exports = __toCommonJS(accordion_exports);
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var AccordionContext = React.createContext(null);
var Root = React.forwardRef(
  ({
    asChild,
    type,
    disabled,
    collapsible = true,
    value: valueProp,
    onValueChange: onValueChangeProps,
    defaultValue,
    ...viewProps
  }, ref) => {
    const [value = type === "multiple" ? [] : void 0, onValueChange] = (0, import_hooks.useControllableState)({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChangeProps
    });
    const Component = asChild ? Slot.View : import_react_native.View;
    return <AccordionContext.Provider
      value={{
        type,
        disabled,
        collapsible,
        value,
        onValueChange
      }}
    ><Component ref={ref} {...viewProps} /></AccordionContext.Provider>;
  }
);
Root.displayName = "RootNativeAccordion";
function useRootContext() {
  const context = React.useContext(AccordionContext);
  if (!context) {
    throw new Error(
      "Accordion compound components cannot be rendered outside the Accordion component"
    );
  }
  return context;
}
var AccordionItemContext = React.createContext(null);
var Item = React.forwardRef(
  ({ asChild, value, disabled, ...viewProps }, ref) => {
    const { value: rootValue } = useRootContext();
    const nativeID = React.useId();
    const Component = asChild ? Slot.View : import_react_native.View;
    return <AccordionItemContext.Provider
      value={{
        value,
        disabled,
        nativeID,
        isExpanded: isItemExpanded(rootValue, value)
      }}
    ><Component ref={ref} {...viewProps} /></AccordionItemContext.Provider>;
  }
);
Item.displayName = "ItemNativeAccordion";
function useItemContext() {
  const context = React.useContext(AccordionItemContext);
  if (!context) {
    throw new Error(
      "AccordionItem compound components cannot be rendered outside the AccordionItem component"
    );
  }
  return context;
}
var Header = React.forwardRef(({ asChild, ...props }, ref) => {
  const { disabled: rootDisabled } = useRootContext();
  const { disabled: itemDisabled, isExpanded } = useItemContext();
  const Component = asChild ? Slot.View : import_react_native.View;
  return <Component
    ref={ref}
    role='heading'
    aria-expanded={isExpanded}
    aria-disabled={rootDisabled ?? itemDisabled}
    {...props}
  />;
});
Header.displayName = "HeaderNativeAccordion";
var Trigger = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled: disabledProp, ...props }, ref) => {
    const {
      disabled: rootDisabled,
      type,
      onValueChange,
      value: rootValue,
      collapsible
    } = useRootContext();
    const { nativeID, disabled: itemDisabled, value, isExpanded } = useItemContext();
    function onPress(ev) {
      if (rootDisabled || itemDisabled) return;
      if (type === "single") {
        const newValue = collapsible ? value === rootValue ? void 0 : value : value;
        onValueChange(newValue);
      }
      if (type === "multiple") {
        const rootToArray = toStringArray(rootValue);
        const newValue = collapsible ? rootToArray.includes(value) ? rootToArray.filter((val) => val !== value) : rootToArray.concat(value) : [...new Set(rootToArray.concat(value))];
        onValueChange(newValue);
      }
      onPressProp?.(ev);
    }
    const isDisabled = disabledProp || rootDisabled || itemDisabled;
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Component
      ref={ref}
      nativeID={nativeID}
      aria-disabled={isDisabled}
      role='button'
      onPress={onPress}
      accessibilityState={{
        expanded: isExpanded,
        disabled: isDisabled
      }}
      disabled={isDisabled}
      {...props}
    />;
  }
);
Trigger.displayName = "TriggerNativeAccordion";
var Content = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { type } = useRootContext();
    const { nativeID, isExpanded } = useItemContext();
    if (!forceMount) {
      if (!isExpanded) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Component
      ref={ref}
      aria-hidden={!(forceMount || isExpanded)}
      aria-labelledby={nativeID}
      role={type === "single" ? "region" : "summary"}
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeAccordion";
function toStringArray(value) {
  return Array.isArray(value) ? value : value ? [value] : [];
}
function isItemExpanded(rootValue, value) {
  return Array.isArray(rootValue) ? rootValue.includes(value) : rootValue === value;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Header,
  Item,
  Root,
  Trigger,
  useItemContext,
  useRootContext
});
