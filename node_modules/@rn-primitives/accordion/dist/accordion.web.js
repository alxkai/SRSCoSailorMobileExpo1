'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/accordion.web.tsx
var accordion_web_exports = {};
__export(accordion_web_exports, {
  Content: () => Content2,
  Header: () => Header2,
  Item: () => Item2,
  Root: () => Root2,
  Trigger: () => Trigger2,
  useItemContext: () => useItemContext,
  useRootContext: () => useRootContext
});
module.exports = __toCommonJS(accordion_web_exports);
var Accordion = __toESM(require("@radix-ui/react-accordion"));
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var AccordionContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({
    asChild,
    value: valueProp,
    onValueChange: onValueChangeProps,
    defaultValue,
    type,
    disabled,
    dir,
    orientation = "vertical",
    collapsible,
    ...props
  }, ref) => {
    const [value = type === "multiple" ? [] : void 0, onValueChange] = (0, import_hooks.useControllableState)({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChangeProps
    });
    const Component = asChild ? Slot.View : import_react_native.View;
    return <AccordionContext.Provider
      value={{
        value,
        onValueChange,
        type,
        disabled,
        dir,
        orientation
      }}
    ><Accordion.Root
      asChild
      value={value}
      onValueChange={onValueChange}
      type={type}
      disabled={disabled}
      dir={dir}
      orientation={orientation}
      collapsible={collapsible}
    ><Component ref={ref} {...props} /></Accordion.Root></AccordionContext.Provider>;
  }
);
Root2.displayName = "RootWebAccordion";
function useRootContext() {
  const context = React.useContext(AccordionContext);
  if (!context) {
    throw new Error(
      "Accordion compound components cannot be rendered outside the Accordion component"
    );
  }
  return context;
}
var AccordionItemContext = React.createContext(
  null
);
var Item2 = React.forwardRef(
  ({ asChild, value: itemValue, disabled, ...props }, ref) => {
    const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
    const { value, orientation, disabled: disabledRoot } = useRootContext();
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        const isExpanded = Array.isArray(value) ? value.includes(itemValue) : value === itemValue;
        augRef.dataset.state = isExpanded ? "open" : "closed";
      }
    }, [value, itemValue]);
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.orientation = orientation;
        if (disabled || disabledRoot) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [orientation, disabled, disabledRoot]);
    const Component = asChild ? Slot.View : import_react_native.View;
    return <AccordionItemContext.Provider
      value={{
        value: itemValue,
        disabled,
        isExpanded: isItemExpanded(value, itemValue)
      }}
    ><Accordion.Item value={itemValue} disabled={disabled} asChild><Component ref={augmentedRef} {...props} /></Accordion.Item></AccordionItemContext.Provider>;
  }
);
Item2.displayName = "ItemWebAccordion";
function useItemContext() {
  const context = React.useContext(AccordionItemContext);
  if (!context) {
    throw new Error(
      "AccordionItem compound components cannot be rendered outside the AccordionItem component"
    );
  }
  return context;
}
var Header2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
  const { disabled, isExpanded } = useItemContext();
  const { orientation, disabled: disabledRoot } = useRootContext();
  (0, import_hooks.useIsomorphicLayoutEffect)(() => {
    if (augmentedRef.current) {
      const augRef = augmentedRef.current;
      augRef.dataset.state = isExpanded ? "open" : "closed";
    }
  }, [isExpanded]);
  (0, import_hooks.useIsomorphicLayoutEffect)(() => {
    if (augmentedRef.current) {
      const augRef = augmentedRef.current;
      augRef.dataset.orientation = orientation;
      if (disabled || disabledRoot) {
        augRef.dataset.disabled = "true";
      } else {
        augRef.dataset.disabled = void 0;
      }
    }
  }, [orientation, disabled, disabledRoot]);
  const Component = asChild ? Slot.View : import_react_native.View;
  return <Accordion.Header asChild><Component ref={augmentedRef} {...props} /></Accordion.Header>;
});
Header2.displayName = "HeaderWebAccordion";
var HIDDEN_STYLE = {
  position: "absolute",
  top: 0,
  left: 0,
  zIndex: -999999,
  opacity: 0
};
var Trigger2 = React.forwardRef(
  ({ asChild, disabled: disabledProp, ...props }, ref) => {
    const { disabled: disabledRoot } = useRootContext();
    const { disabled, isExpanded } = useItemContext();
    const triggerRef = React.useRef(null);
    const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = isExpanded ? "expanded" : "closed";
      }
    }, [isExpanded]);
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        if (disabled || disabledRoot || disabledProp) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled, disabledRoot, disabledProp]);
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (triggerRef.current) {
        triggerRef.current.disabled = true;
      }
    }, []);
    const isDisabled = disabledProp ?? disabledRoot ?? disabled;
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <><Accordion.Trigger ref={triggerRef} aria-hidden tabIndex={-1} style={HIDDEN_STYLE} /><Accordion.Trigger disabled={isDisabled} asChild><Component
      ref={augmentedRef}
      role='button'
      disabled={isDisabled}
      {...props}
      onPress={(ev) => {
        if (triggerRef.current && !isDisabled) {
          triggerRef.current.disabled = false;
          triggerRef.current.click();
          triggerRef.current.disabled = true;
        }
        props.onPress?.(ev);
      }}
    /></Accordion.Trigger></>;
  }
);
Trigger2.displayName = "TriggerWebAccordion";
var Content2 = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
    const { orientation, disabled: disabledRoot } = useRootContext();
    const { disabled, isExpanded } = useItemContext();
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = isExpanded ? "expanded" : "closed";
      }
    }, [isExpanded]);
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.orientation = orientation;
        if (disabled || disabledRoot) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [orientation, disabled, disabledRoot]);
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Accordion.Content forceMount={forceMount} asChild><Component ref={augmentedRef} {...props} /></Accordion.Content>;
  }
);
Content2.displayName = "ContentWebAccordion";
function isItemExpanded(rootValue, value) {
  return Array.isArray(rootValue) ? rootValue.includes(value) : rootValue === value;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Header,
  Item,
  Root,
  Trigger,
  useItemContext,
  useRootContext
});
