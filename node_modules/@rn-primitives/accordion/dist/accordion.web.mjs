'use client'

// src/accordion.web.tsx
import * as Accordion from "@radix-ui/react-accordion";
import {
  useAugmentedRef,
  useControllableState,
  useIsomorphicLayoutEffect
} from "@rn-primitives/hooks";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var AccordionContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({
    asChild,
    value: valueProp,
    onValueChange: onValueChangeProps,
    defaultValue,
    type,
    disabled,
    dir,
    orientation = "vertical",
    collapsible,
    ...props
  }, ref) => {
    const [value = type === "multiple" ? [] : void 0, onValueChange] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChangeProps
    });
    const Component = asChild ? Slot.View : View2;
    return <AccordionContext.Provider
      value={{
        value,
        onValueChange,
        type,
        disabled,
        dir,
        orientation
      }}
    ><Accordion.Root
      asChild
      value={value}
      onValueChange={onValueChange}
      type={type}
      disabled={disabled}
      dir={dir}
      orientation={orientation}
      collapsible={collapsible}
    ><Component ref={ref} {...props} /></Accordion.Root></AccordionContext.Provider>;
  }
);
Root2.displayName = "RootWebAccordion";
function useRootContext() {
  const context = React.useContext(AccordionContext);
  if (!context) {
    throw new Error(
      "Accordion compound components cannot be rendered outside the Accordion component"
    );
  }
  return context;
}
var AccordionItemContext = React.createContext(
  null
);
var Item2 = React.forwardRef(
  ({ asChild, value: itemValue, disabled, ...props }, ref) => {
    const augmentedRef = useAugmentedRef({ ref });
    const { value, orientation, disabled: disabledRoot } = useRootContext();
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        const isExpanded = Array.isArray(value) ? value.includes(itemValue) : value === itemValue;
        augRef.dataset.state = isExpanded ? "open" : "closed";
      }
    }, [value, itemValue]);
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.orientation = orientation;
        if (disabled || disabledRoot) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [orientation, disabled, disabledRoot]);
    const Component = asChild ? Slot.View : View2;
    return <AccordionItemContext.Provider
      value={{
        value: itemValue,
        disabled,
        isExpanded: isItemExpanded(value, itemValue)
      }}
    ><Accordion.Item value={itemValue} disabled={disabled} asChild><Component ref={augmentedRef} {...props} /></Accordion.Item></AccordionItemContext.Provider>;
  }
);
Item2.displayName = "ItemWebAccordion";
function useItemContext() {
  const context = React.useContext(AccordionItemContext);
  if (!context) {
    throw new Error(
      "AccordionItem compound components cannot be rendered outside the AccordionItem component"
    );
  }
  return context;
}
var Header2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const augmentedRef = useAugmentedRef({ ref });
  const { disabled, isExpanded } = useItemContext();
  const { orientation, disabled: disabledRoot } = useRootContext();
  useIsomorphicLayoutEffect(() => {
    if (augmentedRef.current) {
      const augRef = augmentedRef.current;
      augRef.dataset.state = isExpanded ? "open" : "closed";
    }
  }, [isExpanded]);
  useIsomorphicLayoutEffect(() => {
    if (augmentedRef.current) {
      const augRef = augmentedRef.current;
      augRef.dataset.orientation = orientation;
      if (disabled || disabledRoot) {
        augRef.dataset.disabled = "true";
      } else {
        augRef.dataset.disabled = void 0;
      }
    }
  }, [orientation, disabled, disabledRoot]);
  const Component = asChild ? Slot.View : View2;
  return <Accordion.Header asChild><Component ref={augmentedRef} {...props} /></Accordion.Header>;
});
Header2.displayName = "HeaderWebAccordion";
var HIDDEN_STYLE = {
  position: "absolute",
  top: 0,
  left: 0,
  zIndex: -999999,
  opacity: 0
};
var Trigger2 = React.forwardRef(
  ({ asChild, disabled: disabledProp, ...props }, ref) => {
    const { disabled: disabledRoot } = useRootContext();
    const { disabled, isExpanded } = useItemContext();
    const triggerRef = React.useRef(null);
    const augmentedRef = useAugmentedRef({ ref });
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = isExpanded ? "expanded" : "closed";
      }
    }, [isExpanded]);
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        if (disabled || disabledRoot || disabledProp) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled, disabledRoot, disabledProp]);
    useIsomorphicLayoutEffect(() => {
      if (triggerRef.current) {
        triggerRef.current.disabled = true;
      }
    }, []);
    const isDisabled = disabledProp ?? disabledRoot ?? disabled;
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <><Accordion.Trigger ref={triggerRef} aria-hidden tabIndex={-1} style={HIDDEN_STYLE} /><Accordion.Trigger disabled={isDisabled} asChild><Component
      ref={augmentedRef}
      role='button'
      disabled={isDisabled}
      {...props}
      onPress={(ev) => {
        if (triggerRef.current && !isDisabled) {
          triggerRef.current.disabled = false;
          triggerRef.current.click();
          triggerRef.current.disabled = true;
        }
        props.onPress?.(ev);
      }}
    /></Accordion.Trigger></>;
  }
);
Trigger2.displayName = "TriggerWebAccordion";
var Content2 = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const augmentedRef = useAugmentedRef({ ref });
    const { orientation, disabled: disabledRoot } = useRootContext();
    const { disabled, isExpanded } = useItemContext();
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = isExpanded ? "expanded" : "closed";
      }
    }, [isExpanded]);
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.orientation = orientation;
        if (disabled || disabledRoot) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [orientation, disabled, disabledRoot]);
    const Component = asChild ? Slot.View : View2;
    return <Accordion.Content forceMount={forceMount} asChild><Component ref={augmentedRef} {...props} /></Accordion.Content>;
  }
);
Content2.displayName = "ContentWebAccordion";
function isItemExpanded(rootValue, value) {
  return Array.isArray(rootValue) ? rootValue.includes(value) : rootValue === value;
}
export {
  Content2 as Content,
  Header2 as Header,
  Item2 as Item,
  Root2 as Root,
  Trigger2 as Trigger,
  useItemContext,
  useRootContext
};
