'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/menubar.web.tsx
var menubar_web_exports = {};
__export(menubar_web_exports, {
  CheckboxItem: () => CheckboxItem2,
  Content: () => Content2,
  Group: () => Group2,
  Item: () => Item2,
  ItemIndicator: () => ItemIndicator2,
  Label: () => Label2,
  Menu: () => Menu2,
  Overlay: () => Overlay,
  Portal: () => Portal2,
  RadioGroup: () => RadioGroup2,
  RadioItem: () => RadioItem2,
  Root: () => Root2,
  Separator: () => Separator2,
  Sub: () => Sub2,
  SubContent: () => SubContent2,
  SubTrigger: () => SubTrigger2,
  Trigger: () => Trigger2,
  useMenuContext: () => useMenuContext,
  useRootContext: () => useRootContext,
  useSubContext: () => useSubContext
});
module.exports = __toCommonJS(menubar_web_exports);
var Menubar = __toESM(require("@radix-ui/react-menubar"));
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var import_utils = require("@rn-primitives/utils");
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var RootContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({ asChild, value, onValueChange, ...viewProps }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <RootContext.Provider value={{ value, onValueChange }}><Menubar.Root value={value} onValueChange={onValueChange}><Component ref={ref} {...viewProps} /></Menubar.Root></RootContext.Provider>;
  }
);
Root2.displayName = "RootWebMenubar";
function useRootContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error("Menubar compound components cannot be rendered outside the Menubar component");
  }
  return context;
}
var MenuContext = React.createContext(null);
var Menu2 = React.forwardRef(({ asChild, value, ...viewProps }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <MenuContext.Provider value={{ value }}><Menubar.Menu value={value}><Component ref={ref} {...viewProps} /></Menubar.Menu></MenuContext.Provider>;
});
Menu2.displayName = "MenuWebMenubar";
function useMenuContext() {
  const context = React.useContext(MenuContext);
  if (!context) {
    throw new Error("Menubar compound components cannot be rendered outside the Menubar component");
  }
  return context;
}
var Trigger2 = React.forwardRef(
  ({ asChild, disabled = false, ...props }, ref) => {
    const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
    const { value: menuValue } = useMenuContext();
    const { value } = useRootContext();
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = value && menuValue === value ? "open" : "closed";
      }
    }, [value && menuValue]);
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        if (disabled) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled]);
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Menubar.Trigger disabled={disabled ?? void 0} asChild><Component ref={augmentedRef} disabled={disabled} {...props} /></Menubar.Trigger>;
  }
);
Trigger2.displayName = "TriggerWebMenubar";
function Portal2({ forceMount, container, children }) {
  return <Menubar.Portal forceMount={forceMount} container={container} children={children} />;
}
var Overlay = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
  return <Component ref={ref} {...props} />;
});
Overlay.displayName = "OverlayWebMenubar";
var MenubarContentContext = React.createContext(null);
var Content2 = React.forwardRef(
  ({
    asChild = false,
    forceMount,
    align,
    side,
    sideOffset,
    alignOffset = 0,
    avoidCollisions = true,
    insets,
    loop,
    onCloseAutoFocus,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    collisionBoundary,
    sticky,
    hideWhenDetached,
    ...props
  }, ref) => {
    const itemRef = React.useRef(null);
    function close2() {
      itemRef.current?.click();
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <MenubarContentContext.Provider value={{ close: close2 }}><Menubar.Content
      forceMount={forceMount}
      alignOffset={alignOffset}
      avoidCollisions={avoidCollisions}
      collisionPadding={insets}
      loop={loop}
      onCloseAutoFocus={onCloseAutoFocus}
      onEscapeKeyDown={onEscapeKeyDown}
      onPointerDownOutside={onPointerDownOutside}
      onFocusOutside={onFocusOutside}
      onInteractOutside={onInteractOutside}
      collisionBoundary={collisionBoundary}
      sticky={sticky}
      hideWhenDetached={hideWhenDetached}
      align={align}
      side={side}
      sideOffset={sideOffset}
    ><Component ref={ref} {...props} /><Menubar.Item
      ref={itemRef}
      aria-hidden
      style={{ position: "fixed", top: 0, left: 0, zIndex: -999999999 }}
      aria-disabled
      tabIndex={-1}
      hidden
    /></Menubar.Content></MenubarContentContext.Provider>;
  }
);
Content2.displayName = "ContentWebMenubar";
function useMenubarContentContext() {
  const context = React.useContext(MenubarContentContext);
  if (!context) {
    throw new Error(
      "MenubarContent compound components cannot be rendered outside the MenubarContent component"
    );
  }
  return context;
}
var Item2 = React.forwardRef(
  ({
    asChild,
    textValue,
    closeOnPress = true,
    onPress: onPressProp,
    onKeyDown: onKeyDownProp,
    ...props
  }, ref) => {
    const { close: close2 } = useMenubarContentContext();
    function onKeyDown(ev) {
      onKeyDownProp?.(ev);
      if (ev.key === "Enter" || ev.key === " ") {
        onPressProp?.(import_utils.EmptyGestureResponderEvent);
        if (closeOnPress) {
          close2();
        }
      }
    }
    function onPress(ev) {
      onPressProp?.(ev);
      if (closeOnPress) {
        close2();
      }
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Menubar.Item
      textValue={textValue}
      disabled={props.disabled ?? void 0}
      onSelect={closeOnPress ? void 0 : onSelected}
      asChild
    ><Component
      ref={ref}
      onKeyDown={onKeyDown}
      onPress={onPress}
      {...props}
    /></Menubar.Item>;
  }
);
Item2.displayName = "ItemWebMenubar";
var Group2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <Menubar.Group asChild><Component ref={ref} {...props} /></Menubar.Group>;
});
Group2.displayName = "GroupWebMenubar";
var Label2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Text : import_react_native.Text;
  return <Menubar.Label asChild><Component ref={ref} {...props} /></Menubar.Label>;
});
Label2.displayName = "LabelWebMenubar";
var CheckboxItem2 = React.forwardRef(
  ({
    asChild,
    checked,
    onCheckedChange,
    textValue,
    disabled = false,
    closeOnPress = true,
    onPress: onPressProp,
    onKeyDown: onKeyDownProp,
    ...props
  }, ref) => {
    function onKeyDown(ev) {
      onKeyDownProp?.(ev);
      if (ev.key === "Enter" || ev.key === " ") {
        onPressProp?.(import_utils.EmptyGestureResponderEvent);
        onCheckedChange?.(!checked);
        if (closeOnPress) {
          close();
        }
      }
    }
    function onPress(ev) {
      onPressProp?.(ev);
      onCheckedChange?.(!checked);
      if (closeOnPress) {
        close();
      }
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Menubar.CheckboxItem
      textValue={textValue}
      checked={checked}
      onCheckedChange={onCheckedChange}
      onSelect={closeOnPress ? void 0 : onSelected}
      disabled={disabled ?? void 0}
      asChild
    ><Component
      ref={ref}
      onKeyDown={onKeyDown}
      onPress={onPress}
      role='button'
      {...props}
    /></Menubar.CheckboxItem>;
  }
);
CheckboxItem2.displayName = "CheckboxItemWebMenubar";
var MenubarRadioGroupContext = React.createContext(null);
var RadioGroup2 = React.forwardRef(
  ({ asChild, value, onValueChange, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <MenubarRadioGroupContext.Provider value={{ value, onValueChange }}><Menubar.RadioGroup value={value} onValueChange={onValueChange} asChild><Component ref={ref} {...props} /></Menubar.RadioGroup></MenubarRadioGroupContext.Provider>;
  }
);
RadioGroup2.displayName = "RadioGroupWebMenubar";
function useMenubarRadioGroupContext() {
  const context = React.useContext(MenubarRadioGroupContext);
  if (!context) {
    throw new Error(
      "MenubarRadioGroup compound components cannot be rendered outside the MenubarRadioGroup component"
    );
  }
  return context;
}
var RadioItem2 = React.forwardRef(
  ({
    asChild,
    value,
    textValue,
    closeOnPress = true,
    onPress: onPressProp,
    onKeyDown: onKeyDownProp,
    ...props
  }, ref) => {
    const { onValueChange } = useMenubarRadioGroupContext();
    const { close: close2 } = useMenubarContentContext();
    function onKeyDown(ev) {
      onKeyDownProp?.(ev);
      if (ev.key === "Enter" || ev.key === " ") {
        onValueChange?.(value);
        onPressProp?.(import_utils.EmptyGestureResponderEvent);
        if (closeOnPress) {
          close2();
        }
      }
    }
    function onPress(ev) {
      onValueChange?.(value);
      onPressProp?.(ev);
      if (closeOnPress) {
        close2();
      }
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Menubar.RadioItem
      value={value}
      textValue={textValue}
      disabled={props.disabled ?? void 0}
      onSelect={closeOnPress ? void 0 : onSelected}
      asChild
    ><Component
      ref={ref}
      onKeyDown={onKeyDown}
      onPress={onPress}
      {...props}
    /></Menubar.RadioItem>;
  }
);
RadioItem2.displayName = "RadioItemWebMenubar";
var ItemIndicator2 = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Menubar.ItemIndicator forceMount={forceMount} asChild><Component ref={ref} {...props} /></Menubar.ItemIndicator>;
  }
);
ItemIndicator2.displayName = "ItemIndicatorWebMenubar";
var Separator2 = React.forwardRef(
  ({ asChild, decorative, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Menubar.Separator asChild><Component ref={ref} {...props} /></Menubar.Separator>;
  }
);
Separator2.displayName = "SeparatorWebMenubar";
var MenubarSubContext = React.createContext(null);
var Sub2 = React.forwardRef(
  ({ asChild, defaultOpen, open: openProp, onOpenChange: onOpenChangeProp, ...props }, ref) => {
    const [open = false, onOpenChange] = (0, import_hooks.useControllableState)({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChangeProp
    });
    const Component = asChild ? Slot.View : import_react_native.View;
    return <MenubarSubContext.Provider value={{ open, onOpenChange }}><Menubar.Sub open={open} onOpenChange={onOpenChange}><Component ref={ref} {...props} /></Menubar.Sub></MenubarSubContext.Provider>;
  }
);
Sub2.displayName = "SubWebMenubar";
function useSubContext() {
  const context = React.useContext(MenubarSubContext);
  if (!context) {
    throw new Error(
      "MenubarSub compound components cannot be rendered outside the MenubarSub component"
    );
  }
  return context;
}
var SubTrigger2 = React.forwardRef(
  ({ asChild, textValue, disabled = false, onPress: onPressProp, ...props }, ref) => {
    const { onOpenChange } = useSubContext();
    function onPress(ev) {
      onOpenChange(true);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Menubar.SubTrigger disabled={disabled ?? void 0} textValue={textValue} asChild><Component ref={ref} onPress={onPress} {...props} /></Menubar.SubTrigger>;
  }
);
SubTrigger2.displayName = "SubTriggerWebMenubar";
var SubContent2 = React.forwardRef(
  ({ asChild = false, forceMount, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Menubar.Portal><Menubar.SubContent forceMount={forceMount}><Component ref={ref} {...props} /></Menubar.SubContent></Menubar.Portal>;
  }
);
Content2.displayName = "ContentWebMenubar";
function onSelected(ev) {
  ev.preventDefault();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CheckboxItem,
  Content,
  Group,
  Item,
  ItemIndicator,
  Label,
  Menu,
  Overlay,
  Portal,
  RadioGroup,
  RadioItem,
  Root,
  Separator,
  Sub,
  SubContent,
  SubTrigger,
  Trigger,
  useMenuContext,
  useRootContext,
  useSubContext
});
