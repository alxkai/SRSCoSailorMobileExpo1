'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/dialog.tsx
var dialog_exports = {};
__export(dialog_exports, {
  Close: () => Close,
  Content: () => Content,
  Description: () => Description,
  Overlay: () => Overlay,
  Portal: () => Portal,
  Root: () => Root,
  Title: () => Title,
  Trigger: () => Trigger,
  useRootContext: () => useRootContext
});
module.exports = __toCommonJS(dialog_exports);
var import_hooks = require("@rn-primitives/hooks");
var import_portal = require("@rn-primitives/portal");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var DialogContext = React.createContext(null);
var Root = React.forwardRef(
  ({ asChild, open: openProp, defaultOpen, onOpenChange: onOpenChangeProp, ...viewProps }, ref) => {
    const nativeID = React.useId();
    const [open = false, onOpenChange] = (0, import_hooks.useControllableState)({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChangeProp
    });
    const Component = asChild ? Slot.View : import_react_native.View;
    return <DialogContext.Provider
      value={{
        open,
        onOpenChange,
        nativeID
      }}
    ><Component ref={ref} {...viewProps} /></DialogContext.Provider>;
  }
);
Root.displayName = "RootNativeDialog";
function useRootContext() {
  const context = React.useContext(DialogContext);
  if (!context) {
    throw new Error("Dialog compound components cannot be rendered outside the Dialog component");
  }
  return context;
}
var Trigger = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled = false, ...props }, ref) => {
    const { open, onOpenChange } = useRootContext();
    function onPress(ev) {
      if (disabled) return;
      const newValue = !open;
      onOpenChange(newValue);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Component
      ref={ref}
      aria-disabled={disabled ?? void 0}
      role='button'
      onPress={onPress}
      disabled={disabled ?? void 0}
      {...props}
    />;
  }
);
Trigger.displayName = "TriggerNativeDialog";
function Portal({ forceMount, hostName, children }) {
  const value = useRootContext();
  if (!forceMount) {
    if (!value.open) {
      return null;
    }
  }
  return <import_portal.Portal hostName={hostName} name={`${value.nativeID}_portal`}><DialogContext.Provider value={value}>{children}</DialogContext.Provider></import_portal.Portal>;
}
var Overlay = React.forwardRef(
  ({ asChild, forceMount, closeOnPress = true, onPress: OnPressProp, ...props }, ref) => {
    const { open, onOpenChange } = useRootContext();
    function onPress(ev) {
      if (closeOnPress) {
        onOpenChange(!open);
      }
      OnPressProp?.(ev);
    }
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Component ref={ref} onPress={onPress} {...props} />;
  }
);
Overlay.displayName = "OverlayNativeDialog";
var Content = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { open, nativeID, onOpenChange } = useRootContext();
    React.useEffect(() => {
      const backHandler = import_react_native.BackHandler.addEventListener("hardwareBackPress", () => {
        onOpenChange(false);
        return true;
      });
      return () => {
        backHandler.remove();
      };
    }, []);
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Component
      ref={ref}
      role='dialog'
      nativeID={nativeID}
      aria-labelledby={`${nativeID}_label`}
      aria-describedby={`${nativeID}_desc`}
      aria-modal={true}
      onStartShouldSetResponder={onStartShouldSetResponder}
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeDialog";
var Close = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled = false, ...props }, ref) => {
    const { onOpenChange } = useRootContext();
    function onPress(ev) {
      if (disabled) return;
      onOpenChange(false);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Component
      ref={ref}
      aria-disabled={disabled ?? void 0}
      role='button'
      onPress={onPress}
      disabled={disabled ?? void 0}
      {...props}
    />;
  }
);
Close.displayName = "CloseNativeDialog";
var Title = React.forwardRef((props, ref) => {
  const { nativeID } = useRootContext();
  return <import_react_native.Text ref={ref} role='heading' nativeID={`${nativeID}_label`} {...props} />;
});
Title.displayName = "TitleNativeDialog";
var Description = React.forwardRef((props, ref) => {
  const { nativeID } = useRootContext();
  return <import_react_native.Text ref={ref} nativeID={`${nativeID}_desc`} {...props} />;
});
Description.displayName = "DescriptionNativeDialog";
function onStartShouldSetResponder() {
  return true;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Close,
  Content,
  Description,
  Overlay,
  Portal,
  Root,
  Title,
  Trigger,
  useRootContext
});
