import * as _rn_primitives_types from '@rn-primitives/types';
import * as react_native from 'react-native';
import { View, Text } from 'react-native';
import * as React from 'react';
import { RootContext, PortalProps } from './index.mjs';
import './dialog';

declare const Root: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    open?: boolean;
    defaultOpen?: boolean;
    onOpenChange?: (value: boolean) => void;
} & React.RefAttributes<View>>;
declare function useRootContext(): RootContext;
declare const Trigger: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<View>>;
declare function Portal({ forceMount, container, children }: PortalProps): React.JSX.Element;
declare const Overlay: React.ForwardRefExoticComponent<_rn_primitives_types.ForceMountable & Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & {
    closeOnPress?: boolean;
} & React.RefAttributes<View>>;
declare const Content: React.ForwardRefExoticComponent<_rn_primitives_types.ForceMountable & react_native.ViewProps & {
    asChild?: boolean;
} & {
    onOpenAutoFocus?: (ev: Event) => void;
    onCloseAutoFocus?: (ev: Event) => void;
    onEscapeKeyDown?: (ev: Event) => void;
    onInteractOutside?: (ev: Event) => void;
    onPointerDownOutside?: (ev: Event) => void;
} & React.RefAttributes<View>>;
declare const Close: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<View>>;
declare const Title: React.ForwardRefExoticComponent<react_native.TextProps & {
    asChild?: boolean;
} & React.RefAttributes<Text>>;
declare const Description: React.ForwardRefExoticComponent<react_native.TextProps & {
    asChild?: boolean;
} & React.RefAttributes<Text>>;

export { Close, Content, Description, Overlay, Portal, Root, Title, Trigger, useRootContext };
