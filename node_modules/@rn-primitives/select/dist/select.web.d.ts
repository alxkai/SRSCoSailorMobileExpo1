import * as _rn_primitives_types from '@rn-primitives/types';
import { Option, SharedRootContext, TriggerRef, PortalProps, ItemTextProps, ScrollUpButtonProps, ScrollDownButtonProps, ViewportProps } from './index.js';
import * as react_native from 'react-native';
import { View, Text } from 'react-native';
import * as React from 'react';
import './select';

/**
 * @web Parameter of `onValueChange` has the value of `value` for the `value` and the `label` of the selected Option
 * @ex When an Option with a label of Green Apple, the parameter passed to `onValueChange` is { value: 'green-apple', label: 'green-apple' }
 */
declare const Root: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    value?: Option;
    defaultValue?: Option;
    onValueChange?: (option: Option) => void;
    onOpenChange?: (open: boolean) => void;
    disabled?: boolean;
    dir?: "ltr" | "rtl";
    name?: string;
    required?: boolean;
} & React.RefAttributes<View>>;
declare function useRootContext(): SharedRootContext & {
    open: boolean;
    onOpenChange: (open: boolean) => void;
};
declare const Trigger: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<TriggerRef>>;
declare const Value: React.ForwardRefExoticComponent<react_native.TextProps & {
    asChild?: boolean;
} & {
    placeholder: string;
} & React.RefAttributes<Text>>;
declare function Portal({ container, children }: PortalProps): React.JSX.Element;
declare const Overlay: React.ForwardRefExoticComponent<_rn_primitives_types.ForceMountable & Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & {
    closeOnPress?: boolean;
} & React.RefAttributes<View>>;
declare const Content: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & _rn_primitives_types.PositionedContentProps & {
    position?: "popper" | "item-aligned" | undefined;
} & React.RefAttributes<View>>;
declare const Item: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & {
    value: string;
    label: string;
    closeOnPress?: boolean;
} & React.RefAttributes<View>>;
declare function useItemContext(): {
    itemValue: string;
    label: string;
};
declare const ItemText: React.ForwardRefExoticComponent<Omit<ItemTextProps, "children"> & React.RefAttributes<Text>>;
declare const ItemIndicator: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & _rn_primitives_types.ForceMountable & React.RefAttributes<View>>;
declare const Group: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
declare const Label: React.ForwardRefExoticComponent<react_native.TextProps & {
    asChild?: boolean;
} & React.RefAttributes<Text>>;
declare const Separator: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    decorative?: boolean;
} & React.RefAttributes<View>>;
declare const ScrollUpButton: (props: ScrollUpButtonProps) => React.JSX.Element;
declare const ScrollDownButton: (props: ScrollDownButtonProps) => React.JSX.Element;
declare const Viewport: (props: ViewportProps) => React.JSX.Element;

export { Content, Group, Item, ItemIndicator, ItemText, Label, Overlay, Portal, Root, ScrollDownButton, ScrollUpButton, Separator, Trigger, Value, Viewport, useItemContext, useRootContext };
