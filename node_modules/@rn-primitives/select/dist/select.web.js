'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/select.web.tsx
var select_web_exports = {};
__export(select_web_exports, {
  Content: () => Content2,
  Group: () => Group2,
  Item: () => Item2,
  ItemIndicator: () => ItemIndicator2,
  ItemText: () => ItemText2,
  Label: () => Label2,
  Overlay: () => Overlay,
  Portal: () => Portal2,
  Root: () => Root2,
  ScrollDownButton: () => ScrollDownButton2,
  ScrollUpButton: () => ScrollUpButton2,
  Separator: () => Separator2,
  Trigger: () => Trigger2,
  Value: () => Value2,
  Viewport: () => Viewport2,
  useItemContext: () => useItemContext,
  useRootContext: () => useRootContext
});
module.exports = __toCommonJS(select_web_exports);
var Select = __toESM(require("@radix-ui/react-select"));
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var SelectContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({
    asChild,
    value: valueProp,
    defaultValue,
    onValueChange: onValueChangeProp,
    onOpenChange: onOpenChangeProp,
    ...viewProps
  }, ref) => {
    const [value, onValueChange] = (0, import_hooks.useControllableState)({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChangeProp
    });
    const [open, setOpen] = React.useState(false);
    function onOpenChange(value2) {
      setOpen(value2);
      onOpenChangeProp?.(value2);
    }
    function onStrValueChange(val) {
      onValueChange({ value: val, label: val });
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <SelectContext.Provider
      value={{
        value,
        onValueChange,
        open,
        onOpenChange
      }}
    ><Select.Root
      value={value?.value}
      defaultValue={defaultValue?.value}
      onValueChange={onStrValueChange}
      open={open}
      onOpenChange={onOpenChange}
    ><Component ref={ref} {...viewProps} /></Select.Root></SelectContext.Provider>;
  }
);
Root2.displayName = "RootWebSelect";
function useRootContext() {
  const context = React.useContext(SelectContext);
  if (!context) {
    throw new Error("Select compound components cannot be rendered outside the Select component");
  }
  return context;
}
var Trigger2 = React.forwardRef(
  ({ asChild, role: _role, disabled, ...props }, ref) => {
    const { open, onOpenChange } = useRootContext();
    const augmentedRef = (0, import_hooks.useAugmentedRef)({
      ref,
      methods: {
        open() {
          onOpenChange(true);
        },
        close() {
          onOpenChange(false);
        }
      }
    });
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
        augRef.type = "button";
      }
    }, [open]);
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Select.Trigger disabled={disabled ?? void 0} asChild><Component ref={augmentedRef} role='button' disabled={disabled} {...props} /></Select.Trigger>;
  }
);
Trigger2.displayName = "TriggerWebSelect";
var Value2 = React.forwardRef(
  ({ asChild, placeholder, children, ...props }, ref) => {
    return <Slot.Text ref={ref} {...props}><Select.Value placeholder={placeholder}>{children}</Select.Value></Slot.Text>;
  }
);
Value2.displayName = "ValueWebSelect";
function Portal2({ container, children }) {
  return <Select.Portal children={children} container={container} />;
}
var Overlay = React.forwardRef(
  ({ asChild, forceMount, children, ...props }, ref) => {
    const { open } = useRootContext();
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <>{open && <Component ref={ref} {...props} />}{children}</>;
  }
);
Overlay.displayName = "OverlayWebSelect";
var Content2 = React.forwardRef(
  ({
    asChild = false,
    forceMount: _forceMount,
    align = "start",
    side = "bottom",
    position = "popper",
    sideOffset = 0,
    alignOffset = 0,
    avoidCollisions = true,
    disablePositioningStyle: _disablePositioningStyle,
    onCloseAutoFocus,
    onEscapeKeyDown,
    onInteractOutside: _onInteractOutside,
    onPointerDownOutside,
    ...props
  }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Select.Content
      onCloseAutoFocus={onCloseAutoFocus}
      onEscapeKeyDown={onEscapeKeyDown}
      onPointerDownOutside={onPointerDownOutside}
      align={align}
      side={side}
      sideOffset={sideOffset}
      alignOffset={alignOffset}
      avoidCollisions={avoidCollisions}
      position={position}
    ><Component ref={ref} {...props} /></Select.Content>;
  }
);
Content2.displayName = "ContentWebSelect";
var ItemContext = React.createContext(null);
var Item2 = React.forwardRef(
  ({ asChild, closeOnPress = true, label, value, children, ...props }, ref) => {
    return <ItemContext.Provider value={{ itemValue: value, label }}><Slot.Pressable ref={ref} {...props}><Select.Item textValue={label} value={value} disabled={props.disabled ?? void 0}><>{children}</></Select.Item></Slot.Pressable></ItemContext.Provider>;
  }
);
Item2.displayName = "ItemWebSelect";
function useItemContext() {
  const context = React.useContext(ItemContext);
  if (!context) {
    throw new Error("Item compound components cannot be rendered outside of an Item component");
  }
  return context;
}
var ItemText2 = React.forwardRef(
  ({ asChild, ...props }, ref) => {
    const { label } = useItemContext();
    const Component = asChild ? Slot.Text : import_react_native.Text;
    return <Select.ItemText asChild><Component ref={ref} {...props}>{label}</Component></Select.ItemText>;
  }
);
ItemText2.displayName = "ItemTextWebSelect";
var ItemIndicator2 = React.forwardRef(
  ({ asChild, forceMount: _forceMount, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Select.ItemIndicator asChild><Component ref={ref} {...props} /></Select.ItemIndicator>;
  }
);
ItemIndicator2.displayName = "ItemIndicatorWebSelect";
var Group2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <Select.Group asChild><Component ref={ref} {...props} /></Select.Group>;
});
Group2.displayName = "GroupWebSelect";
var Label2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Text : import_react_native.Text;
  return <Select.Label asChild><Component ref={ref} {...props} /></Select.Label>;
});
Label2.displayName = "LabelWebSelect";
var Separator2 = React.forwardRef(
  ({ asChild, decorative, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Select.Separator asChild><Component ref={ref} {...props} /></Select.Separator>;
  }
);
Separator2.displayName = "SeparatorWebSelect";
var ScrollUpButton2 = (props) => {
  return <Select.ScrollUpButton {...props} />;
};
var ScrollDownButton2 = (props) => {
  return <Select.ScrollDownButton {...props} />;
};
var Viewport2 = (props) => {
  return <Select.Viewport {...props} />;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Group,
  Item,
  ItemIndicator,
  ItemText,
  Label,
  Overlay,
  Portal,
  Root,
  ScrollDownButton,
  ScrollUpButton,
  Separator,
  Trigger,
  Value,
  Viewport,
  useItemContext,
  useRootContext
});
