'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/select.tsx
var select_exports = {};
__export(select_exports, {
  Content: () => Content,
  Group: () => Group,
  Item: () => Item,
  ItemIndicator: () => ItemIndicator,
  ItemText: () => ItemText,
  Label: () => Label,
  Overlay: () => Overlay,
  Portal: () => Portal,
  Root: () => Root,
  ScrollDownButton: () => ScrollDownButton,
  ScrollUpButton: () => ScrollUpButton,
  Separator: () => Separator,
  Trigger: () => Trigger,
  Value: () => Value,
  Viewport: () => Viewport,
  useItemContext: () => useItemContext,
  useRootContext: () => useRootContext
});
module.exports = __toCommonJS(select_exports);
var import_hooks = require("@rn-primitives/hooks");
var import_portal = require("@rn-primitives/portal");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var RootContext = React.createContext(null);
var Root = React.forwardRef(
  ({
    asChild,
    value: valueProp,
    defaultValue,
    onValueChange: onValueChangeProp,
    onOpenChange: onOpenChangeProp,
    disabled,
    ...viewProps
  }, ref) => {
    const nativeID = React.useId();
    const [value, onValueChange] = (0, import_hooks.useControllableState)({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChangeProp
    });
    const [triggerPosition, setTriggerPosition] = React.useState(null);
    const [contentLayout, setContentLayout] = React.useState(null);
    const [open, setOpen] = React.useState(false);
    function onOpenChange(value2) {
      setOpen(value2);
      onOpenChangeProp?.(value2);
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <RootContext.Provider
      value={{
        value,
        onValueChange,
        open,
        onOpenChange,
        disabled,
        contentLayout,
        nativeID,
        setContentLayout,
        setTriggerPosition,
        triggerPosition
      }}
    ><Component ref={ref} {...viewProps} /></RootContext.Provider>;
  }
);
Root.displayName = "RootNativeSelect";
function useRootContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error("Select compound components cannot be rendered outside the Select component");
  }
  return context;
}
var Trigger = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled = false, ...props }, ref) => {
    const { open, onOpenChange, disabled: disabledRoot, setTriggerPosition } = useRootContext();
    const augmentedRef = (0, import_hooks.useAugmentedRef)({
      ref,
      methods: {
        open: () => {
          onOpenChange(true);
          augmentedRef.current?.measure((_x, _y, width, height, pageX, pageY) => {
            setTriggerPosition({ width, pageX, pageY, height });
          });
        },
        close: () => {
          setTriggerPosition(null);
          onOpenChange(false);
        }
      }
    });
    function onPress(ev) {
      if (disabled) return;
      augmentedRef.current?.measure((_x, _y, width, height, pageX, pageY) => {
        setTriggerPosition({ width, pageX, pageY, height });
      });
      onOpenChange(!open);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Component
      ref={augmentedRef}
      aria-disabled={disabled ?? void 0}
      role='combobox'
      onPress={onPress}
      disabled={disabled ?? disabledRoot}
      aria-expanded={open}
      {...props}
    />;
  }
);
Trigger.displayName = "TriggerNativeSelect";
var Value = React.forwardRef(({ asChild, placeholder, ...props }, ref) => {
  const { value } = useRootContext();
  const Component = asChild ? Slot.Text : import_react_native.Text;
  return <Component ref={ref} {...props}>{value?.label ?? placeholder}</Component>;
});
Value.displayName = "ValueNativeSelect";
function Portal({ forceMount, hostName, children }) {
  const value = useRootContext();
  if (!value.triggerPosition) {
    return null;
  }
  if (!forceMount) {
    if (!value.open) {
      return null;
    }
  }
  return <import_portal.Portal hostName={hostName} name={`${value.nativeID}_portal`}><RootContext.Provider value={value}>{children}</RootContext.Provider></import_portal.Portal>;
}
var Overlay = React.forwardRef(
  ({ asChild, forceMount, onPress: OnPressProp, closeOnPress = true, ...props }, ref) => {
    const { open, onOpenChange, setTriggerPosition, setContentLayout } = useRootContext();
    function onPress(ev) {
      if (closeOnPress) {
        setTriggerPosition(null);
        setContentLayout(null);
        onOpenChange(false);
      }
      OnPressProp?.(ev);
    }
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Component ref={ref} onPress={onPress} {...props} />;
  }
);
Overlay.displayName = "OverlayNativeSelect";
var Content = React.forwardRef(
  ({
    asChild = false,
    forceMount,
    align = "start",
    side = "bottom",
    sideOffset = 0,
    alignOffset = 0,
    avoidCollisions = true,
    onLayout: onLayoutProp,
    insets,
    style,
    disablePositioningStyle,
    position: _position,
    ...props
  }, ref) => {
    const {
      open,
      onOpenChange,
      contentLayout,
      nativeID,
      triggerPosition,
      setContentLayout,
      setTriggerPosition
    } = useRootContext();
    React.useEffect(() => {
      const backHandler = import_react_native.BackHandler.addEventListener("hardwareBackPress", () => {
        setTriggerPosition(null);
        setContentLayout(null);
        onOpenChange(false);
        return true;
      });
      return () => {
        setContentLayout(null);
        backHandler.remove();
      };
    }, []);
    const positionStyle = (0, import_hooks.useRelativePosition)({
      align,
      avoidCollisions,
      triggerPosition,
      contentLayout,
      alignOffset,
      insets,
      sideOffset,
      side,
      disablePositioningStyle
    });
    function onLayout(event) {
      setContentLayout(event.nativeEvent.layout);
      onLayoutProp?.(event);
    }
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Component
      ref={ref}
      role='list'
      nativeID={nativeID}
      aria-modal={true}
      style={[positionStyle, style]}
      onLayout={onLayout}
      onStartShouldSetResponder={onStartShouldSetResponder}
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeSelect";
var ItemContext = React.createContext(null);
var Item = React.forwardRef(
  ({
    asChild,
    value: itemValue,
    label,
    onPress: onPressProp,
    disabled = false,
    closeOnPress = true,
    ...props
  }, ref) => {
    const { onOpenChange, value, onValueChange, setTriggerPosition, setContentLayout } = useRootContext();
    function onPress(ev) {
      if (closeOnPress) {
        setTriggerPosition(null);
        setContentLayout(null);
        onOpenChange(false);
      }
      onValueChange({ value: itemValue, label });
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <ItemContext.Provider value={{ itemValue, label }}><Component
      ref={ref}
      role='option'
      onPress={onPress}
      disabled={disabled}
      aria-checked={value?.value === itemValue}
      aria-valuetext={label}
      aria-disabled={!!disabled}
      accessibilityState={{
        disabled: !!disabled,
        checked: value?.value === itemValue
      }}
      {...props}
    /></ItemContext.Provider>;
  }
);
Item.displayName = "ItemNativeSelect";
function useItemContext() {
  const context = React.useContext(ItemContext);
  if (!context) {
    throw new Error("Item compound components cannot be rendered outside of an Item component");
  }
  return context;
}
var ItemText = React.forwardRef(({ asChild, ...props }, ref) => {
  const { label } = useItemContext();
  const Component = asChild ? Slot.Text : import_react_native.Text;
  return <Component ref={ref} {...props}>{label}</Component>;
});
ItemText.displayName = "ItemTextNativeSelect";
var ItemIndicator = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { itemValue } = useItemContext();
    const { value } = useRootContext();
    if (!forceMount) {
      if (value?.value !== itemValue) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Component ref={ref} role='presentation' {...props} />;
  }
);
ItemIndicator.displayName = "ItemIndicatorNativeSelect";
var Group = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <Component ref={ref} role='group' {...props} />;
});
Group.displayName = "GroupNativeSelect";
var Label = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Text : import_react_native.Text;
  return <Component ref={ref} {...props} />;
});
Label.displayName = "LabelNativeSelect";
var Separator = React.forwardRef(
  ({ asChild, decorative, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Component role={decorative ? "presentation" : "separator"} ref={ref} {...props} />;
  }
);
Separator.displayName = "SeparatorNativeSelect";
var ScrollUpButton = ({ children }) => {
  return <>{children}</>;
};
var ScrollDownButton = ({ children }) => {
  return <>{children}</>;
};
var Viewport = ({ children }) => {
  return <>{children}</>;
};
function onStartShouldSetResponder() {
  return true;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Group,
  Item,
  ItemIndicator,
  ItemText,
  Label,
  Overlay,
  Portal,
  Root,
  ScrollDownButton,
  ScrollUpButton,
  Separator,
  Trigger,
  Value,
  Viewport,
  useItemContext,
  useRootContext
});
