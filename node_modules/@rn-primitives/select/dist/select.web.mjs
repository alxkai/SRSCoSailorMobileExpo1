'use client'

// src/select.web.tsx
import * as Select from "@radix-ui/react-select";
import {
  useAugmentedRef,
  useControllableState,
  useIsomorphicLayoutEffect
} from "@rn-primitives/hooks";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, Text as Text2, View as View2 } from "react-native";
var SelectContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({
    asChild,
    value: valueProp,
    defaultValue,
    onValueChange: onValueChangeProp,
    onOpenChange: onOpenChangeProp,
    ...viewProps
  }, ref) => {
    const [value, onValueChange] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChangeProp
    });
    const [open, setOpen] = React.useState(false);
    function onOpenChange(value2) {
      setOpen(value2);
      onOpenChangeProp?.(value2);
    }
    function onStrValueChange(val) {
      onValueChange({ value: val, label: val });
    }
    const Component = asChild ? Slot.View : View2;
    return <SelectContext.Provider
      value={{
        value,
        onValueChange,
        open,
        onOpenChange
      }}
    ><Select.Root
      value={value?.value}
      defaultValue={defaultValue?.value}
      onValueChange={onStrValueChange}
      open={open}
      onOpenChange={onOpenChange}
    ><Component ref={ref} {...viewProps} /></Select.Root></SelectContext.Provider>;
  }
);
Root2.displayName = "RootWebSelect";
function useRootContext() {
  const context = React.useContext(SelectContext);
  if (!context) {
    throw new Error("Select compound components cannot be rendered outside the Select component");
  }
  return context;
}
var Trigger2 = React.forwardRef(
  ({ asChild, role: _role, disabled, ...props }, ref) => {
    const { open, onOpenChange } = useRootContext();
    const augmentedRef = useAugmentedRef({
      ref,
      methods: {
        open() {
          onOpenChange(true);
        },
        close() {
          onOpenChange(false);
        }
      }
    });
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
        augRef.type = "button";
      }
    }, [open]);
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Select.Trigger disabled={disabled ?? void 0} asChild><Component ref={augmentedRef} role='button' disabled={disabled} {...props} /></Select.Trigger>;
  }
);
Trigger2.displayName = "TriggerWebSelect";
var Value2 = React.forwardRef(
  ({ asChild, placeholder, children, ...props }, ref) => {
    return <Slot.Text ref={ref} {...props}><Select.Value placeholder={placeholder}>{children}</Select.Value></Slot.Text>;
  }
);
Value2.displayName = "ValueWebSelect";
function Portal2({ container, children }) {
  return <Select.Portal children={children} container={container} />;
}
var Overlay = React.forwardRef(
  ({ asChild, forceMount, children, ...props }, ref) => {
    const { open } = useRootContext();
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <>{open && <Component ref={ref} {...props} />}{children}</>;
  }
);
Overlay.displayName = "OverlayWebSelect";
var Content2 = React.forwardRef(
  ({
    asChild = false,
    forceMount: _forceMount,
    align = "start",
    side = "bottom",
    position = "popper",
    sideOffset = 0,
    alignOffset = 0,
    avoidCollisions = true,
    disablePositioningStyle: _disablePositioningStyle,
    onCloseAutoFocus,
    onEscapeKeyDown,
    onInteractOutside: _onInteractOutside,
    onPointerDownOutside,
    ...props
  }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <Select.Content
      onCloseAutoFocus={onCloseAutoFocus}
      onEscapeKeyDown={onEscapeKeyDown}
      onPointerDownOutside={onPointerDownOutside}
      align={align}
      side={side}
      sideOffset={sideOffset}
      alignOffset={alignOffset}
      avoidCollisions={avoidCollisions}
      position={position}
    ><Component ref={ref} {...props} /></Select.Content>;
  }
);
Content2.displayName = "ContentWebSelect";
var ItemContext = React.createContext(null);
var Item2 = React.forwardRef(
  ({ asChild, closeOnPress = true, label, value, children, ...props }, ref) => {
    return <ItemContext.Provider value={{ itemValue: value, label }}><Slot.Pressable ref={ref} {...props}><Select.Item textValue={label} value={value} disabled={props.disabled ?? void 0}><>{children}</></Select.Item></Slot.Pressable></ItemContext.Provider>;
  }
);
Item2.displayName = "ItemWebSelect";
function useItemContext() {
  const context = React.useContext(ItemContext);
  if (!context) {
    throw new Error("Item compound components cannot be rendered outside of an Item component");
  }
  return context;
}
var ItemText2 = React.forwardRef(
  ({ asChild, ...props }, ref) => {
    const { label } = useItemContext();
    const Component = asChild ? Slot.Text : Text2;
    return <Select.ItemText asChild><Component ref={ref} {...props}>{label}</Component></Select.ItemText>;
  }
);
ItemText2.displayName = "ItemTextWebSelect";
var ItemIndicator2 = React.forwardRef(
  ({ asChild, forceMount: _forceMount, ...props }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <Select.ItemIndicator asChild><Component ref={ref} {...props} /></Select.ItemIndicator>;
  }
);
ItemIndicator2.displayName = "ItemIndicatorWebSelect";
var Group2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : View2;
  return <Select.Group asChild><Component ref={ref} {...props} /></Select.Group>;
});
Group2.displayName = "GroupWebSelect";
var Label2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Text : Text2;
  return <Select.Label asChild><Component ref={ref} {...props} /></Select.Label>;
});
Label2.displayName = "LabelWebSelect";
var Separator2 = React.forwardRef(
  ({ asChild, decorative, ...props }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <Select.Separator asChild><Component ref={ref} {...props} /></Select.Separator>;
  }
);
Separator2.displayName = "SeparatorWebSelect";
var ScrollUpButton2 = (props) => {
  return <Select.ScrollUpButton {...props} />;
};
var ScrollDownButton2 = (props) => {
  return <Select.ScrollDownButton {...props} />;
};
var Viewport2 = (props) => {
  return <Select.Viewport {...props} />;
};
export {
  Content2 as Content,
  Group2 as Group,
  Item2 as Item,
  ItemIndicator2 as ItemIndicator,
  ItemText2 as ItemText,
  Label2 as Label,
  Overlay,
  Portal2 as Portal,
  Root2 as Root,
  ScrollDownButton2 as ScrollDownButton,
  ScrollUpButton2 as ScrollUpButton,
  Separator2 as Separator,
  Trigger2 as Trigger,
  Value2 as Value,
  Viewport2 as Viewport,
  useItemContext,
  useRootContext
};
