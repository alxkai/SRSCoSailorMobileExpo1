import * as _rn_primitives_types from '@rn-primitives/types';
import { Option, TriggerRef, PortalProps, ItemTextProps, ScrollUpButtonProps, ScrollDownButtonProps, ViewportProps, SharedRootContext } from './index.mjs';
import * as react_native from 'react-native';
import { View, Text, LayoutRectangle } from 'react-native';
import { LayoutPosition } from '@rn-primitives/hooks';
import * as React from 'react';
import './select';

interface IRootContext extends SharedRootContext {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    triggerPosition: LayoutPosition | null;
    setTriggerPosition: (triggerPosition: LayoutPosition | null) => void;
    contentLayout: LayoutRectangle | null;
    setContentLayout: (contentLayout: LayoutRectangle | null) => void;
    nativeID: string;
}
declare const Root: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    value?: Option;
    defaultValue?: Option;
    onValueChange?: (option: Option) => void;
    onOpenChange?: (open: boolean) => void;
    disabled?: boolean;
    dir?: "ltr" | "rtl";
    name?: string;
    required?: boolean;
} & React.RefAttributes<View>>;
declare function useRootContext(): IRootContext;
declare const Trigger: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<TriggerRef>>;
declare const Value: React.ForwardRefExoticComponent<react_native.TextProps & {
    asChild?: boolean;
} & {
    placeholder: string;
} & React.RefAttributes<Text>>;
/**
 * @warning when using a custom `<PortalHost />`, you might have to adjust the Content's sideOffset.
 */
declare function Portal({ forceMount, hostName, children }: PortalProps): React.JSX.Element | null;
declare const Overlay: React.ForwardRefExoticComponent<_rn_primitives_types.ForceMountable & Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & {
    closeOnPress?: boolean;
} & React.RefAttributes<View>>;
/**
 * @info `position`, `top`, `left`, and `maxWidth` style properties are controlled internally. Opt out of this behavior by setting `disablePositioningStyle` to `true`.
 */
declare const Content: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & _rn_primitives_types.PositionedContentProps & {
    position?: "popper" | "item-aligned" | undefined;
} & React.RefAttributes<View>>;
declare const Item: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & {
    value: string;
    label: string;
    closeOnPress?: boolean;
} & React.RefAttributes<View>>;
declare function useItemContext(): {
    itemValue: string;
    label: string;
};
declare const ItemText: React.ForwardRefExoticComponent<ItemTextProps & React.RefAttributes<Text>>;
declare const ItemIndicator: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & _rn_primitives_types.ForceMountable & React.RefAttributes<View>>;
declare const Group: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
declare const Label: React.ForwardRefExoticComponent<react_native.TextProps & {
    asChild?: boolean;
} & React.RefAttributes<Text>>;
declare const Separator: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    decorative?: boolean;
} & React.RefAttributes<View>>;
declare const ScrollUpButton: ({ children }: ScrollUpButtonProps) => React.JSX.Element;
declare const ScrollDownButton: ({ children }: ScrollDownButtonProps) => React.JSX.Element;
declare const Viewport: ({ children }: ViewportProps) => React.JSX.Element;

export { Content, Group, Item, ItemIndicator, ItemText, Label, Overlay, Portal, Root, ScrollDownButton, ScrollUpButton, Separator, Trigger, Value, Viewport, useItemContext, useRootContext };
