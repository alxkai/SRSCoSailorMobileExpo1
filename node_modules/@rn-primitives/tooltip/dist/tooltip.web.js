'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tooltip.web.tsx
var tooltip_web_exports = {};
__export(tooltip_web_exports, {
  Content: () => Content2,
  Overlay: () => Overlay,
  Portal: () => Portal2,
  Root: () => Root2,
  Trigger: () => Trigger2
});
module.exports = __toCommonJS(tooltip_web_exports);
var Tooltip = __toESM(require("@radix-ui/react-tooltip"));
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var RootContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({
    asChild,
    delayDuration,
    skipDelayDuration,
    disableHoverableContent,
    onOpenChange: onOpenChangeProp,
    ...viewProps
  }, ref) => {
    const [open, setOpen] = React.useState(false);
    function onOpenChange(value) {
      setOpen(value);
      onOpenChangeProp?.(value);
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <RootContext.Provider value={{ open, onOpenChange }}><Tooltip.Provider
      delayDuration={delayDuration}
      skipDelayDuration={skipDelayDuration}
      disableHoverableContent={disableHoverableContent}
    ><Tooltip.Root
      open={open}
      onOpenChange={onOpenChange}
      delayDuration={delayDuration}
      disableHoverableContent={disableHoverableContent}
    ><Component ref={ref} {...viewProps} /></Tooltip.Root></Tooltip.Provider></RootContext.Provider>;
  }
);
Root2.displayName = "RootWebTooltip";
function useTooltipContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error("Tooltip compound components cannot be rendered outside the Tooltip component");
  }
  return context;
}
var Trigger2 = React.forwardRef(
  ({ asChild, onPress: onPressProp, role: _role, disabled, ...props }, ref) => {
    const { onOpenChange, open } = useTooltipContext();
    const augmentedRef = (0, import_hooks.useAugmentedRef)({
      ref,
      methods: {
        open() {
          onOpenChange(true);
        },
        close() {
          onOpenChange(false);
        }
      }
    });
    function onPress(ev) {
      if (onPressProp) {
        onPressProp(ev);
      }
      onOpenChange(!open);
    }
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
        augRef.type = "button";
      }
    }, [open]);
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Tooltip.Trigger disabled={disabled ?? void 0} asChild><Component
      ref={augmentedRef}
      onPress={onPress}
      role='button'
      disabled={disabled}
      {...props}
    /></Tooltip.Trigger>;
  }
);
Trigger2.displayName = "TriggerWebTooltip";
function Portal2({ forceMount, container, children }) {
  return <Tooltip.Portal forceMount={forceMount} children={children} container={container} />;
}
var Overlay = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <Component ref={ref} {...props} />;
  }
);
Overlay.displayName = "OverlayWebTooltip";
var Content2 = React.forwardRef(
  ({
    asChild = false,
    forceMount,
    align = "center",
    side = "top",
    sideOffset = 0,
    alignOffset = 0,
    avoidCollisions = true,
    insets: _insets,
    disablePositioningStyle: _disablePositioningStyle,
    onCloseAutoFocus: _onCloseAutoFocus,
    onEscapeKeyDown,
    onInteractOutside: _onInteractOutside,
    onPointerDownOutside,
    sticky,
    hideWhenDetached,
    ...props
  }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Tooltip.Content
      onEscapeKeyDown={onEscapeKeyDown}
      onPointerDownOutside={onPointerDownOutside}
      forceMount={forceMount}
      align={align}
      side={side}
      sideOffset={sideOffset}
      alignOffset={alignOffset}
      avoidCollisions={avoidCollisions}
      sticky={sticky}
      hideWhenDetached={hideWhenDetached}
    ><Component ref={ref} {...props} /></Tooltip.Content>;
  }
);
Content2.displayName = "ContentWebTooltip";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Overlay,
  Portal,
  Root,
  Trigger
});
