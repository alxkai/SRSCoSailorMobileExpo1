import * as react_native from 'react-native';
import { View } from 'react-native';
import { SlottableViewProps, ViewRef, SlottablePressableProps, PressableRef } from '@rn-primitives/types';
import * as React from 'react';

type RootProps = SlottableViewProps;
type RootRef = ViewRef;
declare const Root: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
type HeaderProps = SlottableViewProps;
type HeaderRef = ViewRef;
declare const Header: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
type RowProps = SlottablePressableProps;
type RowRef = PressableRef;
declare const Row: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<View>>;
type HeadProps = SlottableViewProps;
type HeadRef = ViewRef;
declare const Head: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
type BodyProps = SlottableViewProps;
type BodyRef = ViewRef;
declare const Body: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
type CellProps = SlottableViewProps;
type CellRef = ViewRef;
declare const Cell: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
type FooterProps = SlottableViewProps;
type FooterRef = ViewRef;
declare const Footer: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;

export { Body, type BodyProps, type BodyRef, Cell, type CellProps, type CellRef, Footer, type FooterProps, type FooterRef, Head, type HeadProps, type HeadRef, Header, type HeaderProps, type HeaderRef, Root, type RootProps, type RootRef, Row, type RowProps, type RowRef };
