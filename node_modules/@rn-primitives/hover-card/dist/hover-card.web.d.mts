import * as _rn_primitives_types from '@rn-primitives/types';
import * as react_native from 'react-native';
import { View } from 'react-native';
import * as React from 'react';
import { SharedRootContext, TriggerRef, PortalProps } from './index.mjs';
import './hover-card';

declare const Root: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & {
    onOpenChange?: (open: boolean) => void;
    openDelay?: number;
    closeDelay?: number;
} & React.RefAttributes<View>>;
declare function useRootContext(): SharedRootContext;
declare const Trigger: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<TriggerRef>>;
declare function Portal({ forceMount, container, children }: PortalProps): React.JSX.Element;
declare const Overlay: React.ForwardRefExoticComponent<_rn_primitives_types.ForceMountable & Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & {
    closeOnPress?: boolean;
} & React.RefAttributes<View>>;
declare const Content: React.ForwardRefExoticComponent<react_native.ViewProps & {
    asChild?: boolean;
} & _rn_primitives_types.PositionedContentProps & React.RefAttributes<View>>;

export { Content, Overlay, Portal, Root, Trigger, useRootContext };
