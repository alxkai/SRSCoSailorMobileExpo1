'use client'

// src/hover-card.web.tsx
import * as HoverCard from "@radix-ui/react-hover-card";
import { useAugmentedRef } from "@rn-primitives/hooks";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var HoverCardContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({ asChild, openDelay, closeDelay, onOpenChange: onOpenChangeProp, ...viewProps }, ref) => {
    const [open, setOpen] = React.useState(false);
    function onOpenChange(value) {
      setOpen(value);
      onOpenChangeProp?.(value);
    }
    const Component = asChild ? Slot.View : View2;
    return <HoverCardContext.Provider value={{ open, onOpenChange }}><HoverCard.Root
      open={open}
      onOpenChange={onOpenChange}
      openDelay={openDelay}
      closeDelay={closeDelay}
    ><Component ref={ref} {...viewProps} /></HoverCard.Root></HoverCardContext.Provider>;
  }
);
Root2.displayName = "RootWebHoverCard";
function useRootContext() {
  const context = React.useContext(HoverCardContext);
  if (!context) {
    throw new Error(
      "HoverCard compound components cannot be rendered outside the HoverCard component"
    );
  }
  return context;
}
var Trigger2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const { onOpenChange } = useRootContext();
  const augmentedRef = useAugmentedRef({
    ref,
    methods: {
      open() {
        onOpenChange(true);
      },
      close() {
        onOpenChange(false);
      }
    }
  });
  const Component = asChild ? Slot.Pressable : Pressable2;
  return <HoverCard.Trigger asChild><Component ref={augmentedRef} {...props} /></HoverCard.Trigger>;
});
Trigger2.displayName = "TriggerWebHoverCard";
function Portal2({ forceMount, container, children }) {
  return <HoverCard.Portal forceMount={forceMount} container={container} children={children} />;
}
var Overlay = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Pressable : Pressable2;
  return <Component ref={ref} {...props} />;
});
Overlay.displayName = "OverlayWebHoverCard";
var Content2 = React.forwardRef(
  ({
    asChild = false,
    forceMount,
    align,
    side,
    sideOffset,
    alignOffset = 0,
    avoidCollisions = true,
    insets,
    loop: _loop,
    onCloseAutoFocus: _onCloseAutoFocus,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    collisionBoundary,
    sticky,
    hideWhenDetached,
    ...props
  }, ref) => {
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <HoverCard.Content
      forceMount={forceMount}
      alignOffset={alignOffset}
      avoidCollisions={avoidCollisions}
      collisionPadding={insets}
      onEscapeKeyDown={onEscapeKeyDown}
      onPointerDownOutside={onPointerDownOutside}
      onFocusOutside={onFocusOutside}
      onInteractOutside={onInteractOutside}
      collisionBoundary={collisionBoundary}
      sticky={sticky}
      hideWhenDetached={hideWhenDetached}
      align={align}
      side={side}
      sideOffset={sideOffset}
    ><Component ref={ref} {...props} /></HoverCard.Content>;
  }
);
Content2.displayName = "ContentWebHoverCard";
export {
  Content2 as Content,
  Overlay,
  Portal2 as Portal,
  Root2 as Root,
  Trigger2 as Trigger,
  useRootContext
};
